<?php
/**
 * Generated by Haxe 4.0.0-rc.3+e3df7a448
 */

use \php\_Boot\HxAnon;
use \php\Boot;
use \php\_Boot\HxException;

/**
 * The EReg class represents regular expressions.
 * While basic usage and patterns consistently work across platforms, some more
 * complex operations may yield different results. This is a necessary trade-
 * off to retain a certain level of performance.
 * EReg instances can be created by calling the constructor, or with the
 * special syntax `~/pattern/modifier`
 * EReg instances maintain an internal state, which is affected by several of
 * its methods.
 * A detailed explanation of the supported operations is available at
 * <https://haxe.org/manual/std-regex.html>
 */
final class EReg {
	/**
	 * @var bool
	 */
	public $global;
	/**
	 * @var string
	 */
	public $last;
	/**
	 * @var mixed
	 */
	public $matches;
	/**
	 * @var string
	 */
	public $options;
	/**
	 * @var string
	 */
	public $pattern;
	/**
	 * @var string
	 */
	public $re;

	/**
	 * Creates a new regular expression with pattern `r` and modifiers `opt`.
	 * This is equivalent to the shorthand syntax `~/r/opt`
	 * If `r` or `opt` are null, the result is unspecified.
	 * 
	 * @param string $r
	 * @param string $opt
	 * 
	 * @return void
	 */
	public function __construct ($r, $opt) {
		#C:\Users\VEgorov\AppData\Roaming/haxe/versions/4.0.0-rc.3/std/php/_std/EReg.hx:38: characters 3-19
		$this->pattern = $r;
		#C:\Users\VEgorov\AppData\Roaming/haxe/versions/4.0.0-rc.3/std/php/_std/EReg.hx:39: characters 3-45
		$this->options = str_replace("g", "", $opt);
		#C:\Users\VEgorov\AppData\Roaming/haxe/versions/4.0.0-rc.3/std/php/_std/EReg.hx:40: characters 3-26
		$this->global = $this->options !== $opt;
		#C:\Users\VEgorov\AppData\Roaming/haxe/versions/4.0.0-rc.3/std/php/_std/EReg.hx:41: characters 3-68
		$this->re = "\"" . (str_replace("\"", "\\\"", $r)??'null') . "\"" . ($this->options??'null');
	}

	/**
	 * @return void
	 */
	public function handlePregError () {
		#C:\Users\VEgorov\AppData\Roaming/haxe/versions/4.0.0-rc.3/std/php/_std/EReg.hx:59: characters 3-36
		$e = preg_last_error();
		#C:\Users\VEgorov\AppData\Roaming/haxe/versions/4.0.0-rc.3/std/php/_std/EReg.hx:60: lines 60-68
		if ($e === PREG_INTERNAL_ERROR) {
			#C:\Users\VEgorov\AppData\Roaming/haxe/versions/4.0.0-rc.3/std/php/_std/EReg.hx:61: characters 4-9
			throw new HxException("EReg: internal PCRE error");
		} else if ($e === PREG_BACKTRACK_LIMIT_ERROR) {
			#C:\Users\VEgorov\AppData\Roaming/haxe/versions/4.0.0-rc.3/std/php/_std/EReg.hx:63: characters 4-9
			throw new HxException("EReg: backtrack limit");
		} else if ($e === PREG_RECURSION_LIMIT_ERROR) {
			#C:\Users\VEgorov\AppData\Roaming/haxe/versions/4.0.0-rc.3/std/php/_std/EReg.hx:65: characters 4-9
			throw new HxException("EReg: recursion limit");
		} else if ($e === PREG_JIT_STACKLIMIT_ERROR) {
			#C:\Users\VEgorov\AppData\Roaming/haxe/versions/4.0.0-rc.3/std/php/_std/EReg.hx:67: characters 4-9
			throw new HxException("failed due to limited JIT stack space");
		}
	}

	/**
	 * Tells if `this` regular expression matches String `s`.
	 * This method modifies the internal state.
	 * If `s` is `null`, the result is unspecified.
	 * 
	 * @param string $s
	 * 
	 * @return bool
	 */
	public function match ($s) {
		#C:\Users\VEgorov\AppData\Roaming/haxe/versions/4.0.0-rc.3/std/php/_std/EReg.hx:45: characters 3-79
		$p = preg_match(($this->re . "u"), $s, $this->matches, PREG_OFFSET_CAPTURE);
		#C:\Users\VEgorov\AppData\Roaming/haxe/versions/4.0.0-rc.3/std/php/_std/EReg.hx:46: lines 46-49
		if ($p === false) {
			#C:\Users\VEgorov\AppData\Roaming/haxe/versions/4.0.0-rc.3/std/php/_std/EReg.hx:47: characters 4-21
			$this->handlePregError();
			#C:\Users\VEgorov\AppData\Roaming/haxe/versions/4.0.0-rc.3/std/php/_std/EReg.hx:48: characters 4-68
			$p = preg_match($this->re, $s, $this->matches, PREG_OFFSET_CAPTURE);
		}
		#C:\Users\VEgorov\AppData\Roaming/haxe/versions/4.0.0-rc.3/std/php/_std/EReg.hx:50: lines 50-54
		if ($p > 0) {
			#C:\Users\VEgorov\AppData\Roaming/haxe/versions/4.0.0-rc.3/std/php/_std/EReg.hx:51: characters 4-12
			$this->last = $s;
		} else {
			#C:\Users\VEgorov\AppData\Roaming/haxe/versions/4.0.0-rc.3/std/php/_std/EReg.hx:53: characters 4-15
			$this->last = null;
		}
		#C:\Users\VEgorov\AppData\Roaming/haxe/versions/4.0.0-rc.3/std/php/_std/EReg.hx:55: characters 3-21
		return $p > 0;
	}

	/**
	 * Returns the matched sub-group `n` of `this` EReg.
	 * This method should only be called after `this.match` or
	 * `this.matchSub`, and then operates on the String of that operation.
	 * The index `n` corresponds to the n-th set of parentheses in the pattern
	 * of `this` EReg. If no such sub-group exists, the result is unspecified.
	 * If `n` equals 0, the whole matched substring is returned.
	 * 
	 * @param int $n
	 * 
	 * @return string
	 */
	public function matched ($n) {
		#C:\Users\VEgorov\AppData\Roaming/haxe/versions/4.0.0-rc.3/std/php/_std/EReg.hx:77: characters 3-39
		if (($this->matches === null) || ($n < 0)) {
			#C:\Users\VEgorov\AppData\Roaming/haxe/versions/4.0.0-rc.3/std/php/_std/EReg.hx:77: characters 34-39
			throw new HxException("EReg::matched");
		}
		#C:\Users\VEgorov\AppData\Roaming/haxe/versions/4.0.0-rc.3/std/php/_std/EReg.hx:80: characters 3-46
		if ($n >= count($this->matches)) {
			#C:\Users\VEgorov\AppData\Roaming/haxe/versions/4.0.0-rc.3/std/php/_std/EReg.hx:80: characters 35-46
			return null;
		}
		#C:\Users\VEgorov\AppData\Roaming/haxe/versions/4.0.0-rc.3/std/php/_std/EReg.hx:81: characters 3-43
		if ($this->matches[$n][1] < 0) {
			#C:\Users\VEgorov\AppData\Roaming/haxe/versions/4.0.0-rc.3/std/php/_std/EReg.hx:81: characters 32-43
			return null;
		}
		#C:\Users\VEgorov\AppData\Roaming/haxe/versions/4.0.0-rc.3/std/php/_std/EReg.hx:82: characters 3-23
		return $this->matches[$n][0];
	}

	/**
	 * Returns the position and length of the last matched substring, within
	 * the String which was last used as argument to `this.match` or
	 * `this.matchSub`.
	 * If the most recent call to `this.match` or `this.matchSub` did not
	 * match anything, the result is unspecified.
	 * If the global g modifier was in place for the matching, the position and
	 * length of the leftmost substring is returned.
	 * 
	 * @return object
	 */
	public function matchedPos () {
		#C:\Users\VEgorov\AppData\Roaming/haxe/versions/4.0.0-rc.3/std/php/_std/EReg.hx:98: characters 10-65
		$tmp = mb_strlen(substr($this->last, 0, $this->matches[0][1]));
		#C:\Users\VEgorov\AppData\Roaming/haxe/versions/4.0.0-rc.3/std/php/_std/EReg.hx:97: lines 97-100
		return new HxAnon([
			"pos" => $tmp,
			"len" => mb_strlen($this->matches[0][0]),
		]);
	}
}

Boot::registerClass(EReg::class, 'EReg');
