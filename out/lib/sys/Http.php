<?php
/**
 * Generated by Haxe 4.0.0-rc.3+e3df7a4
 */

namespace sys;

use \haxe\io\_BytesData\Container;
use \php\net\SslSocket;
use \php\Boot;
use \haxe\io\BytesOutput;
use \sys\net\Socket;
use \php\net\Socket as NetSocket;
use \haxe\io\Output;
use \haxe\io\BytesBuffer;
use \haxe\io\Eof;
use \haxe\io\Error;
use \haxe\http\HttpBase;
use \php\_Boot\HxString;
use \sys\net\Host;
use \haxe\ds\StringMap;
use \php\_Boot\HxException;
use \haxe\io\Bytes;

class Http extends HttpBase {
	/**
	 * @var object
	 */
	static public $PROXY = null;

	/**
	 * @var Bytes
	 */
	public $chunk_buf;
	/**
	 * @var int
	 */
	public $chunk_size;
	/**
	 * @var float
	 */
	public $cnxTimeout;
	/**
	 * @var object
	 */
	public $file;
	/**
	 * @var bool
	 */
	public $noShutdown;
	/**
	 * @var StringMap
	 */
	public $responseHeaders;

	/**
	 * @param string $url
	 * 
	 * @return void
	 */
	public function __construct ($url) {
		#/home/grabli66/haxe/std/sys/Http.hx:38: characters 3-18
		$this->cnxTimeout = 10;
		#/home/grabli66/haxe/std/sys/Http.hx:40: characters 3-69
		$this->noShutdown = !function_exists("stream_socket_shutdown");
		#/home/grabli66/haxe/std/sys/Http.hx:42: characters 3-13
		parent::__construct($url);
	}

	/**
	 * @param bool $post
	 * @param Output $api
	 * @param Socket $sock
	 * @param string $method
	 * 
	 * @return void
	 */
	public function customRequest ($post, $api, $sock = null, $method = null) {
		#/home/grabli66/haxe/std/sys/Http.hx:80: characters 3-27
		$this->responseData = null;
		#/home/grabli66/haxe/std/sys/Http.hx:81: characters 3-72
		$url_regexp = new \EReg("^(https?://)?([a-zA-Z\\.0-9_-]+)(:[0-9]+)?(.*)\$", "");
		#/home/grabli66/haxe/std/sys/Http.hx:82: lines 82-85
		if (!$url_regexp->match($this->url)) {
			#/home/grabli66/haxe/std/sys/Http.hx:83: characters 4-26
			$this->onError("Invalid URL");
			#/home/grabli66/haxe/std/sys/Http.hx:84: characters 4-10
			return;
		}
		#/home/grabli66/haxe/std/sys/Http.hx:86: characters 3-54
		$secure = $url_regexp->matched(1) === "https://";
		#/home/grabli66/haxe/std/sys/Http.hx:87: lines 87-107
		if ($sock === null) {
			#/home/grabli66/haxe/std/sys/Http.hx:88: lines 88-106
			if ($secure) {
				#/home/grabli66/haxe/std/sys/Http.hx:90: characters 5-35
				$sock = new SslSocket();
			} else {
				#/home/grabli66/haxe/std/sys/Http.hx:102: characters 5-32
				$sock = new NetSocket();
			}
		}
		#/home/grabli66/haxe/std/sys/Http.hx:108: characters 3-36
		$host = $url_regexp->matched(2);
		#/home/grabli66/haxe/std/sys/Http.hx:109: characters 3-42
		$portString = $url_regexp->matched(3);
		#/home/grabli66/haxe/std/sys/Http.hx:110: characters 3-39
		$request = $url_regexp->matched(4);
		#/home/grabli66/haxe/std/sys/Http.hx:114: lines 114-116
		if (mb_substr($request, 0, 1) !== "/") {
			#/home/grabli66/haxe/std/sys/Http.hx:115: characters 4-27
			$request = "/" . ($request??'null');
		}
		#/home/grabli66/haxe/std/sys/Http.hx:117: characters 3-137
		$port = (($portString === null) || ($portString === "") ? ($secure ? 443 : 80) : \Std::parseInt(mb_substr($portString, 1, mb_strlen($portString) - 1)));
		#/home/grabli66/haxe/std/sys/Http.hx:119: characters 3-34
		$multipart = $this->file !== null;
		#/home/grabli66/haxe/std/sys/Http.hx:120: characters 3-23
		$boundary = null;
		#/home/grabli66/haxe/std/sys/Http.hx:121: characters 3-18
		$uri = null;
		#/home/grabli66/haxe/std/sys/Http.hx:122: lines 122-159
		if ($multipart) {
			#/home/grabli66/haxe/std/sys/Http.hx:123: characters 4-15
			$post = true;
			#/home/grabli66/haxe/std/sys/Http.hx:124: characters 4-130
			$boundary = (\Std::string(mt_rand(0, 999))??'null') . (\Std::string(mt_rand(0, 999))??'null') . (\Std::string(mt_rand(0, 999))??'null') . (\Std::string(mt_rand(0, 999))??'null');
			#/home/grabli66/haxe/std/sys/Http.hx:125: lines 125-126
			while (mb_strlen($boundary) < 38) {
				#/home/grabli66/haxe/std/sys/Http.hx:126: characters 5-30
				$boundary = "-" . ($boundary??'null');
			}
			#/home/grabli66/haxe/std/sys/Http.hx:127: characters 4-28
			$b = new \StringBuf();
			#/home/grabli66/haxe/std/sys/Http.hx:128: lines 128-139
			$_g = 0;
			$_g1 = $this->params;
			while ($_g < $_g1->length) {
				#/home/grabli66/haxe/std/sys/Http.hx:128: characters 8-9
				$p = ($_g1->arr[$_g] ?? null);
				#/home/grabli66/haxe/std/sys/Http.hx:128: lines 128-139
				++$_g;
				#/home/grabli66/haxe/std/sys/Http.hx:129: characters 5-16
				$b->add("--");
				#/home/grabli66/haxe/std/sys/Http.hx:130: characters 5-20
				$b->add($boundary);
				#/home/grabli66/haxe/std/sys/Http.hx:131: characters 5-18
				$b->add("\x0D\x0A");
				#/home/grabli66/haxe/std/sys/Http.hx:132: characters 5-52
				$b->add("Content-Disposition: form-data; name=\"");
				#/home/grabli66/haxe/std/sys/Http.hx:133: characters 5-18
				$b->add($p->name);
				#/home/grabli66/haxe/std/sys/Http.hx:134: characters 5-15
				$b->add("\"");
				#/home/grabli66/haxe/std/sys/Http.hx:135: characters 5-18
				$b->add("\x0D\x0A");
				#/home/grabli66/haxe/std/sys/Http.hx:136: characters 5-18
				$b->add("\x0D\x0A");
				#/home/grabli66/haxe/std/sys/Http.hx:137: characters 5-19
				$b->add($p->value);
				#/home/grabli66/haxe/std/sys/Http.hx:138: characters 5-18
				$b->add("\x0D\x0A");
			}

			#/home/grabli66/haxe/std/sys/Http.hx:140: characters 4-15
			$b->add("--");
			#/home/grabli66/haxe/std/sys/Http.hx:141: characters 4-19
			$b->add($boundary);
			#/home/grabli66/haxe/std/sys/Http.hx:142: characters 4-17
			$b->add("\x0D\x0A");
			#/home/grabli66/haxe/std/sys/Http.hx:143: characters 4-51
			$b->add("Content-Disposition: form-data; name=\"");
			#/home/grabli66/haxe/std/sys/Http.hx:144: characters 4-21
			$b->add($this->file->param);
			#/home/grabli66/haxe/std/sys/Http.hx:145: characters 4-26
			$b->add("\"; filename=\"");
			#/home/grabli66/haxe/std/sys/Http.hx:146: characters 4-24
			$b->add($this->file->filename);
			#/home/grabli66/haxe/std/sys/Http.hx:147: characters 4-14
			$b->add("\"");
			#/home/grabli66/haxe/std/sys/Http.hx:148: characters 4-17
			$b->add("\x0D\x0A");
			#/home/grabli66/haxe/std/sys/Http.hx:149: characters 4-55
			$b->add("Content-Type: " . ($this->file->mimeType??'null') . "\x0D\x0A" . "\x0D\x0A");
			#/home/grabli66/haxe/std/sys/Http.hx:150: characters 4-22
			$uri = $b->b;
		} else {
			#/home/grabli66/haxe/std/sys/Http.hx:152: lines 152-158
			$_g2 = 0;
			$_g11 = $this->params;
			while ($_g2 < $_g11->length) {
				#/home/grabli66/haxe/std/sys/Http.hx:152: characters 8-9
				$p1 = ($_g11->arr[$_g2] ?? null);
				#/home/grabli66/haxe/std/sys/Http.hx:152: lines 152-158
				++$_g2;
				#/home/grabli66/haxe/std/sys/Http.hx:153: lines 153-156
				if ($uri === null) {
					#/home/grabli66/haxe/std/sys/Http.hx:154: characters 6-14
					$uri = "";
				} else {
					#/home/grabli66/haxe/std/sys/Http.hx:156: characters 6-16
					$uri = ($uri??'null') . "&";
				}
				#/home/grabli66/haxe/std/sys/Http.hx:157: characters 5-81
				$uri = ($uri??'null') . (rawurlencode($p1->name)??'null') . "=" . (rawurlencode("" . ($p1->value??'null'))??'null');
			}
		}
		#/home/grabli66/haxe/std/sys/Http.hx:161: characters 3-27
		$b1 = new \StringBuf();
		#/home/grabli66/haxe/std/sys/Http.hx:162: lines 162-168
		if ($method !== null) {
			#/home/grabli66/haxe/std/sys/Http.hx:163: characters 4-17
			$b1->add($method);
			#/home/grabli66/haxe/std/sys/Http.hx:164: characters 4-14
			$b1->add(" ");
		} else if ($post) {
			#/home/grabli66/haxe/std/sys/Http.hx:166: characters 4-18
			$b1->add("POST ");
		} else {
			#/home/grabli66/haxe/std/sys/Http.hx:168: characters 4-17
			$b1->add("GET ");
		}
		#/home/grabli66/haxe/std/sys/Http.hx:170: lines 170-177
		if (Http::$PROXY !== null) {
			#/home/grabli66/haxe/std/sys/Http.hx:171: characters 4-20
			$b1->add("http://");
			#/home/grabli66/haxe/std/sys/Http.hx:172: characters 4-15
			$b1->add($host);
			#/home/grabli66/haxe/std/sys/Http.hx:173: lines 173-176
			if ($port !== 80) {
				#/home/grabli66/haxe/std/sys/Http.hx:174: characters 5-15
				$b1->add(":");
				#/home/grabli66/haxe/std/sys/Http.hx:175: characters 5-16
				$b1->add($port);
			}
		}
		#/home/grabli66/haxe/std/sys/Http.hx:178: characters 3-17
		$b1->add($request);
		#/home/grabli66/haxe/std/sys/Http.hx:180: lines 180-186
		if (!$post && ($uri !== null)) {
			#/home/grabli66/haxe/std/sys/Http.hx:181: lines 181-184
			if (HxString::indexOf($request, "?", 0) >= 0) {
				#/home/grabli66/haxe/std/sys/Http.hx:182: characters 5-15
				$b1->add("&");
			} else {
				#/home/grabli66/haxe/std/sys/Http.hx:184: characters 5-15
				$b1->add("?");
			}
			#/home/grabli66/haxe/std/sys/Http.hx:185: characters 4-14
			$b1->add($uri);
		}
		#/home/grabli66/haxe/std/sys/Http.hx:187: characters 3-43
		$b1->add(" HTTP/1.1\x0D\x0AHost: " . ($host??'null') . "\x0D\x0A");
		#/home/grabli66/haxe/std/sys/Http.hx:188: lines 188-205
		if ($this->postData !== null) {
			#/home/grabli66/haxe/std/sys/Http.hx:189: characters 4-52
			$b1->add("Content-Length: " . (mb_strlen($this->postData)??'null') . "\x0D\x0A");
		} else if ($post && ($uri !== null)) {
			#/home/grabli66/haxe/std/sys/Http.hx:191: lines 191-200
			if ($multipart || !\Lambda::exists($this->headers, function ($h) {
				#/home/grabli66/haxe/std/sys/Http.hx:191: characters 56-87
				return $h->name === "Content-Type";
			})) {
				#/home/grabli66/haxe/std/sys/Http.hx:192: characters 5-28
				$b1->add("Content-Type: ");
				#/home/grabli66/haxe/std/sys/Http.hx:193: lines 193-198
				if ($multipart) {
					#/home/grabli66/haxe/std/sys/Http.hx:194: characters 6-34
					$b1->add("multipart/form-data");
					#/home/grabli66/haxe/std/sys/Http.hx:195: characters 6-26
					$b1->add("; boundary=");
					#/home/grabli66/haxe/std/sys/Http.hx:196: characters 6-21
					$b1->add($boundary);
				} else {
					#/home/grabli66/haxe/std/sys/Http.hx:198: characters 6-48
					$b1->add("application/x-www-form-urlencoded");
				}
				#/home/grabli66/haxe/std/sys/Http.hx:199: characters 5-18
				$b1->add("\x0D\x0A");
			}
			#/home/grabli66/haxe/std/sys/Http.hx:201: lines 201-204
			if ($multipart) {
				#/home/grabli66/haxe/std/sys/Http.hx:202: characters 5-78
				$b1->add("Content-Length: " . ((mb_strlen($uri) + $this->file->size + mb_strlen($boundary) + 6)??'null') . "\x0D\x0A");
			} else {
				#/home/grabli66/haxe/std/sys/Http.hx:204: characters 5-48
				$b1->add("Content-Length: " . (mb_strlen($uri)??'null') . "\x0D\x0A");
			}
		}
		#/home/grabli66/haxe/std/sys/Http.hx:206: characters 3-33
		$b1->add("Connection: close\x0D\x0A");
		#/home/grabli66/haxe/std/sys/Http.hx:207: lines 207-212
		$_g3 = 0;
		$_g12 = $this->headers;
		while ($_g3 < $_g12->length) {
			#/home/grabli66/haxe/std/sys/Http.hx:207: characters 7-8
			$h1 = ($_g12->arr[$_g3] ?? null);
			#/home/grabli66/haxe/std/sys/Http.hx:207: lines 207-212
			++$_g3;
			#/home/grabli66/haxe/std/sys/Http.hx:208: characters 4-17
			$b1->add($h1->name);
			#/home/grabli66/haxe/std/sys/Http.hx:209: characters 4-15
			$b1->add(": ");
			#/home/grabli66/haxe/std/sys/Http.hx:210: characters 4-18
			$b1->add($h1->value);
			#/home/grabli66/haxe/std/sys/Http.hx:211: characters 4-17
			$b1->add("\x0D\x0A");
		}

		#/home/grabli66/haxe/std/sys/Http.hx:213: characters 3-16
		$b1->add("\x0D\x0A");
		#/home/grabli66/haxe/std/sys/Http.hx:214: lines 214-217
		if ($this->postData !== null) {
			#/home/grabli66/haxe/std/sys/Http.hx:215: characters 4-19
			$b1->add($this->postData);
		} else if ($post && ($uri !== null)) {
			#/home/grabli66/haxe/std/sys/Http.hx:217: characters 4-14
			$b1->add($uri);
		}
		#/home/grabli66/haxe/std/sys/Http.hx:218: lines 218-246
		try {
			#/home/grabli66/haxe/std/sys/Http.hx:219: lines 219-222
			if (Http::$PROXY !== null) {
				#/home/grabli66/haxe/std/sys/Http.hx:220: characters 5-60
				$sock->connect(new Host(Http::$PROXY->host), Http::$PROXY->port);
			} else {
				#/home/grabli66/haxe/std/sys/Http.hx:222: characters 5-38
				$sock->connect(new Host($host), $port);
			}
			#/home/grabli66/haxe/std/sys/Http.hx:223: characters 4-28
			$sock->write($b1->b);
			#/home/grabli66/haxe/std/sys/Http.hx:224: lines 224-240
			if ($multipart) {
				#/home/grabli66/haxe/std/sys/Http.hx:226: characters 5-44
				$buf = Bytes::alloc(4096);
				#/home/grabli66/haxe/std/sys/Http.hx:227: lines 227-235
				while ($this->file->size > 0) {
					#/home/grabli66/haxe/std/sys/Http.hx:228: characters 6-64
					$size = ($this->file->size > 4096 ? 4096 : $this->file->size);
					#/home/grabli66/haxe/std/sys/Http.hx:229: characters 6-18
					$len = 0;
					#/home/grabli66/haxe/std/sys/Http.hx:230: lines 230-232
					try {
						#/home/grabli66/haxe/std/sys/Http.hx:231: characters 7-42
						$len = $this->file->io->readBytes($buf, 0, $size);
					} catch (\Throwable $__hx__caught_e) {
						$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
						if ($__hx__real_e instanceof Eof) {
							$e = $__hx__real_e;
							#/home/grabli66/haxe/std/sys/Http.hx:232: characters 29-34
							break;
						} else  throw $__hx__caught_e;
					}
					#/home/grabli66/haxe/std/sys/Http.hx:233: characters 6-43
					$sock->output->writeFullBytes($buf, 0, $len);
					#/home/grabli66/haxe/std/sys/Http.hx:234: characters 6-22
					$this->file->size -= $len;
				}
				#/home/grabli66/haxe/std/sys/Http.hx:236: characters 5-23
				$sock->write("\x0D\x0A");
				#/home/grabli66/haxe/std/sys/Http.hx:237: characters 5-21
				$sock->write("--");
				#/home/grabli66/haxe/std/sys/Http.hx:238: characters 5-25
				$sock->write($boundary);
				#/home/grabli66/haxe/std/sys/Http.hx:239: characters 5-21
				$sock->write("--");
			}
			#/home/grabli66/haxe/std/sys/Http.hx:241: characters 4-30
			$this->readHttpResponse($api, $sock);
			#/home/grabli66/haxe/std/sys/Http.hx:242: characters 4-16
			$sock->close();
		} catch (\Throwable $__hx__caught_e) {
			$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
			$e1 = $__hx__real_e;
			#/home/grabli66/haxe/std/sys/Http.hx:244: characters 4-41
			try {
				#/home/grabli66/haxe/std/sys/Http.hx:244: characters 8-20
				$sock->close();
			} catch (\Throwable $__hx__caught_e) {
				$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
				$e2 = $__hx__real_e;
							}
			#/home/grabli66/haxe/std/sys/Http.hx:245: characters 4-26
			$this->onError(\Std::string($e1));
		}
	}

	/**
	 * @param \EReg $chunk_re
	 * @param Output $api
	 * @param Bytes $buf
	 * @param int $len
	 * 
	 * @return bool
	 */
	public function readChunk ($chunk_re, $api, $buf, $len) {
		#/home/grabli66/haxe/std/sys/Http.hx:393: lines 393-427
		if ($this->chunk_size === null) {
			#/home/grabli66/haxe/std/sys/Http.hx:394: lines 394-401
			if ($this->chunk_buf !== null) {
				#/home/grabli66/haxe/std/sys/Http.hx:395: characters 5-39
				$b = new BytesBuffer();
				#/home/grabli66/haxe/std/sys/Http.hx:396: characters 5-21
				$b->b = ($b->b . $this->chunk_buf->b->s);
				#/home/grabli66/haxe/std/sys/Http.hx:397: characters 5-26
				if (($len < 0) || ($len > $buf->length)) {
					throw new HxException(Error::OutsideBounds());
				} else {
					$b->b = ($b->b . substr($buf->b->s, 0, $len));
				}
				#/home/grabli66/haxe/std/sys/Http.hx:398: characters 5-8
				$buf = $b->getBytes();
				#/home/grabli66/haxe/std/sys/Http.hx:399: characters 5-28
				$len += $this->chunk_buf->length;
				#/home/grabli66/haxe/std/sys/Http.hx:400: characters 5-14
				$this->chunk_buf = null;
			}
			#/home/grabli66/haxe/std/sys/Http.hx:405: lines 405-419
			if ($chunk_re->match($buf->toString())) {
				#/home/grabli66/haxe/std/sys/Http.hx:407: characters 5-35
				$p = $chunk_re->matchedPos();
				#/home/grabli66/haxe/std/sys/Http.hx:408: lines 408-418
				if ($p->len <= $len) {
					#/home/grabli66/haxe/std/sys/Http.hx:410: characters 6-16
					$this->chunk_size = \Std::parseInt("0x" . ($chunk_re->matched(1)??'null'));
					#/home/grabli66/haxe/std/sys/Http.hx:411: lines 411-415
					if ($this->chunk_size === 0) {
						#/home/grabli66/haxe/std/sys/Http.hx:412: characters 7-17
						$this->chunk_size = null;
						#/home/grabli66/haxe/std/sys/Http.hx:413: characters 7-16
						$this->chunk_buf = null;
						#/home/grabli66/haxe/std/sys/Http.hx:414: characters 7-19
						return false;
					}
					#/home/grabli66/haxe/std/sys/Http.hx:416: characters 6-18
					$len -= $p->len;
					#/home/grabli66/haxe/std/sys/Http.hx:417: characters 36-54
					$pos = $p->len;
					$tmp = null;
					if (($pos < 0) || ($len < 0) || (($pos + $len) > $buf->length)) {
						throw new HxException(Error::OutsideBounds());
					} else {
						$tmp = new Bytes($len, new Container(substr($buf->b->s, $pos, $len)));
					}
					#/home/grabli66/haxe/std/sys/Http.hx:417: characters 6-59
					return $this->readChunk($chunk_re, $api, $tmp, $len);
				}
			}
			#/home/grabli66/haxe/std/sys/Http.hx:421: lines 421-424
			if ($len > 10) {
				#/home/grabli66/haxe/std/sys/Http.hx:422: characters 5-29
				$this->onError("Invalid chunk");
				#/home/grabli66/haxe/std/sys/Http.hx:423: characters 5-17
				return false;
			}
			#/home/grabli66/haxe/std/sys/Http.hx:425: characters 16-30
			$tmp1 = null;
			if (($len < 0) || ($len > $buf->length)) {
				throw new HxException(Error::OutsideBounds());
			} else {
				$tmp1 = new Bytes($len, new Container(substr($buf->b->s, 0, $len)));
			}
			#/home/grabli66/haxe/std/sys/Http.hx:425: characters 4-13
			$this->chunk_buf = $tmp1;
			#/home/grabli66/haxe/std/sys/Http.hx:426: characters 4-15
			return true;
		}
		#/home/grabli66/haxe/std/sys/Http.hx:428: lines 428-432
		if ($this->chunk_size > $len) {
			#/home/grabli66/haxe/std/sys/Http.hx:429: characters 4-21
			$this->chunk_size -= $len;
			#/home/grabli66/haxe/std/sys/Http.hx:430: characters 4-29
			$api->writeBytes($buf, 0, $len);
			#/home/grabli66/haxe/std/sys/Http.hx:431: characters 4-15
			return true;
		}
		#/home/grabli66/haxe/std/sys/Http.hx:433: characters 3-28
		$end = $this->chunk_size + 2;
		#/home/grabli66/haxe/std/sys/Http.hx:434: lines 434-442
		if ($len >= $end) {
			#/home/grabli66/haxe/std/sys/Http.hx:435: lines 435-436
			if ($this->chunk_size > 0) {
				#/home/grabli66/haxe/std/sys/Http.hx:436: characters 5-37
				$api->writeBytes($buf, 0, $this->chunk_size);
			}
			#/home/grabli66/haxe/std/sys/Http.hx:437: characters 4-14
			$len -= $end;
			#/home/grabli66/haxe/std/sys/Http.hx:438: characters 4-14
			$this->chunk_size = null;
			#/home/grabli66/haxe/std/sys/Http.hx:439: lines 439-440
			if ($len === 0) {
				#/home/grabli66/haxe/std/sys/Http.hx:440: characters 5-16
				return true;
			}
			#/home/grabli66/haxe/std/sys/Http.hx:441: characters 34-50
			$tmp2 = null;
			if (($end < 0) || ($len < 0) || (($end + $len) > $buf->length)) {
				throw new HxException(Error::OutsideBounds());
			} else {
				$tmp2 = new Bytes($len, new Container(substr($buf->b->s, $end, $len)));
			}
			#/home/grabli66/haxe/std/sys/Http.hx:441: characters 4-55
			return $this->readChunk($chunk_re, $api, $tmp2, $len);
		}
		#/home/grabli66/haxe/std/sys/Http.hx:443: lines 443-444
		if ($this->chunk_size > 0) {
			#/home/grabli66/haxe/std/sys/Http.hx:444: characters 4-36
			$api->writeBytes($buf, 0, $this->chunk_size);
		}
		#/home/grabli66/haxe/std/sys/Http.hx:445: characters 3-20
		$this->chunk_size -= $len;
		#/home/grabli66/haxe/std/sys/Http.hx:446: characters 3-14
		return true;
	}

	/**
	 * @param Output $api
	 * @param Socket $sock
	 * 
	 * @return void
	 */
	public function readHttpResponse ($api, $sock) {
		#/home/grabli66/haxe/std/sys/Http.hx:251: characters 3-37
		$b = new BytesBuffer();
		#/home/grabli66/haxe/std/sys/Http.hx:252: characters 3-13
		$k = 4;
		#/home/grabli66/haxe/std/sys/Http.hx:253: characters 3-34
		$s = Bytes::alloc(4);
		#/home/grabli66/haxe/std/sys/Http.hx:254: characters 3-30
		$sock->setTimeout($this->cnxTimeout);
		#/home/grabli66/haxe/std/sys/Http.hx:255: lines 255-311
		while (true) {
			#/home/grabli66/haxe/std/sys/Http.hx:256: characters 4-40
			$p = $sock->input->readBytes($s, 0, $k);
			#/home/grabli66/haxe/std/sys/Http.hx:257: lines 257-258
			while ($p !== $k) {
				#/home/grabli66/haxe/std/sys/Http.hx:258: characters 5-41
				$p += $sock->input->readBytes($s, $p, $k - $p);
			}
			#/home/grabli66/haxe/std/sys/Http.hx:259: characters 4-21
			if (($k < 0) || ($k > $s->length)) {
				throw new HxException(Error::OutsideBounds());
			} else {
				$b->b = ($b->b . substr($s->b->s, 0, $k));
			}
			#/home/grabli66/haxe/std/sys/Http.hx:260: lines 260-310
			if ($k === 1) {
				#/home/grabli66/haxe/std/sys/Http.hx:262: characters 5-22
				$c = ord($s->b->s[0]);
				#/home/grabli66/haxe/std/sys/Http.hx:263: lines 263-264
				if ($c === 10) {
					#/home/grabli66/haxe/std/sys/Http.hx:264: characters 6-11
					break;
				}
				#/home/grabli66/haxe/std/sys/Http.hx:265: lines 265-268
				if ($c === 13) {
					#/home/grabli66/haxe/std/sys/Http.hx:266: characters 6-7
					$k = 3;
				} else {
					#/home/grabli66/haxe/std/sys/Http.hx:268: characters 6-7
					$k = 4;
				}
			} else if ($k === 2) {
				#/home/grabli66/haxe/std/sys/Http.hx:270: characters 5-22
				$c1 = ord($s->b->s[1]);
				#/home/grabli66/haxe/std/sys/Http.hx:271: lines 271-278
				if ($c1 === 10) {
					#/home/grabli66/haxe/std/sys/Http.hx:272: lines 272-273
					if (ord($s->b->s[0]) === 13) {
						#/home/grabli66/haxe/std/sys/Http.hx:273: characters 7-12
						break;
					}
					#/home/grabli66/haxe/std/sys/Http.hx:274: characters 6-7
					$k = 4;
				} else if ($c1 === 13) {
					#/home/grabli66/haxe/std/sys/Http.hx:276: characters 6-7
					$k = 3;
				} else {
					#/home/grabli66/haxe/std/sys/Http.hx:278: characters 6-7
					$k = 4;
				}
			} else if ($k === 3) {
				#/home/grabli66/haxe/std/sys/Http.hx:280: characters 5-22
				$c2 = ord($s->b->s[2]);
				#/home/grabli66/haxe/std/sys/Http.hx:281: lines 281-294
				if ($c2 === 10) {
					#/home/grabli66/haxe/std/sys/Http.hx:282: lines 282-287
					if (ord($s->b->s[1]) !== 13) {
						#/home/grabli66/haxe/std/sys/Http.hx:283: characters 7-8
						$k = 4;
					} else if (ord($s->b->s[0]) !== 10) {
						#/home/grabli66/haxe/std/sys/Http.hx:285: characters 7-8
						$k = 2;
					} else {
						#/home/grabli66/haxe/std/sys/Http.hx:287: characters 7-12
						break;
					}
				} else if ($c2 === 13) {
					#/home/grabli66/haxe/std/sys/Http.hx:289: lines 289-292
					if ((ord($s->b->s[1]) !== 10) || (ord($s->b->s[0]) !== 13)) {
						#/home/grabli66/haxe/std/sys/Http.hx:290: characters 7-8
						$k = 1;
					} else {
						#/home/grabli66/haxe/std/sys/Http.hx:292: characters 7-8
						$k = 3;
					}
				} else {
					#/home/grabli66/haxe/std/sys/Http.hx:294: characters 6-7
					$k = 4;
				}
			} else if ($k === 4) {
				#/home/grabli66/haxe/std/sys/Http.hx:296: characters 5-22
				$c3 = ord($s->b->s[3]);
				#/home/grabli66/haxe/std/sys/Http.hx:297: lines 297-309
				if ($c3 === 10) {
					#/home/grabli66/haxe/std/sys/Http.hx:298: lines 298-303
					if (ord($s->b->s[2]) !== 13) {
						#/home/grabli66/haxe/std/sys/Http.hx:299: characters 7-15
						continue;
					} else if ((ord($s->b->s[1]) !== 10) || (ord($s->b->s[0]) !== 13)) {
						#/home/grabli66/haxe/std/sys/Http.hx:301: characters 7-8
						$k = 2;
					} else {
						#/home/grabli66/haxe/std/sys/Http.hx:303: characters 7-12
						break;
					}
				} else if ($c3 === 13) {
					#/home/grabli66/haxe/std/sys/Http.hx:305: lines 305-308
					if ((ord($s->b->s[2]) !== 10) || (ord($s->b->s[1]) !== 13)) {
						#/home/grabli66/haxe/std/sys/Http.hx:306: characters 7-8
						$k = 3;
					} else {
						#/home/grabli66/haxe/std/sys/Http.hx:308: characters 7-8
						$k = 1;
					}
				}
			}
		};
		#/home/grabli66/haxe/std/sys/Http.hx:315: characters 3-55
		$headers = HxString::split($b->getBytes()->toString(), "\x0D\x0A");
		#/home/grabli66/haxe/std/sys/Http.hx:317: characters 18-33
		if ($headers->length > 0) {
			$headers->length--;
		}
		#/home/grabli66/haxe/std/sys/Http.hx:319: characters 3-36
		$status = \Std::parseInt((HxString::split(array_shift($headers->arr), " ")->arr[1] ?? null));
		#/home/grabli66/haxe/std/sys/Http.hx:320: lines 320-321
		if (($status === 0) || ($status === null)) {
			#/home/grabli66/haxe/std/sys/Http.hx:321: characters 4-9
			throw new HxException("Response status error");
		}
		#/home/grabli66/haxe/std/sys/Http.hx:324: characters 3-16
		if ($headers->length > 0) {
			$headers->length--;
		}
		array_pop($headers->arr);

		#/home/grabli66/haxe/std/sys/Http.hx:325: characters 3-16
		if ($headers->length > 0) {
			$headers->length--;
		}
		array_pop($headers->arr);

		#/home/grabli66/haxe/std/sys/Http.hx:326: characters 3-18
		$this->responseHeaders = new StringMap();
		#/home/grabli66/haxe/std/sys/Http.hx:327: characters 3-19
		$size = null;
		#/home/grabli66/haxe/std/sys/Http.hx:328: characters 3-23
		$chunked = false;
		#/home/grabli66/haxe/std/sys/Http.hx:329: lines 329-342
		$_g = 0;
		while ($_g < $headers->length) {
			#/home/grabli66/haxe/std/sys/Http.hx:330: characters 4-30
			$a = HxString::split(($headers->arr[$_g++] ?? null), ": ");
			#/home/grabli66/haxe/std/sys/Http.hx:331: characters 16-25
			if ($a->length > 0) {
				$a->length--;
			}
			#/home/grabli66/haxe/std/sys/Http.hx:331: characters 4-26
			$hname = array_shift($a->arr);
			#/home/grabli66/haxe/std/sys/Http.hx:332: characters 4-56
			$hval = ($a->length === 1 ? ($a->arr[0] ?? null) : $a->join(": "));
			#/home/grabli66/haxe/std/sys/Http.hx:333: characters 11-53
			$hval = ltrim(rtrim($hval));
			#/home/grabli66/haxe/std/sys/Http.hx:334: characters 4-36
			$this->responseHeaders->data[$hname] = $hval;
			#/home/grabli66/haxe/std/sys/Http.hx:335: characters 11-30
			$__hx__switch = (mb_strtolower($hname));
			if ($__hx__switch === "content-length") {
				#/home/grabli66/haxe/std/sys/Http.hx:338: characters 6-10
				$size = \Std::parseInt($hval);
			} else if ($__hx__switch === "transfer-encoding") {
				#/home/grabli66/haxe/std/sys/Http.hx:340: characters 6-13
				$chunked = mb_strtolower($hval) === "chunked";
			}
		}

		#/home/grabli66/haxe/std/sys/Http.hx:344: characters 3-19
		$this->onStatus($status);
		#/home/grabli66/haxe/std/sys/Http.hx:346: characters 3-46
		$chunk_re = new \EReg("^([0-9A-Fa-f]+)[ ]*\x0D\x0A", "m");
		#/home/grabli66/haxe/std/sys/Http.hx:347: characters 3-13
		$this->chunk_size = null;
		#/home/grabli66/haxe/std/sys/Http.hx:348: characters 3-12
		$this->chunk_buf = null;
		#/home/grabli66/haxe/std/sys/Http.hx:351: characters 3-42
		$buf = Bytes::alloc(1024);
		#/home/grabli66/haxe/std/sys/Http.hx:352: lines 352-384
		if ($chunked) {
			#/home/grabli66/haxe/std/sys/Http.hx:353: lines 353-361
			try {
				#/home/grabli66/haxe/std/sys/Http.hx:354: lines 354-358
				while ($this->readChunk($chunk_re, $api, $buf, $sock->input->readBytes($buf, 0, 1024))) {
				}
			} catch (\Throwable $__hx__caught_e) {
				$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
				if ($__hx__real_e instanceof Eof) {
					$e = $__hx__real_e;
					#/home/grabli66/haxe/std/sys/Http.hx:360: characters 5-10
					throw new HxException("Transfer aborted");
				} else  throw $__hx__caught_e;
			}
		} else if ($size === null) {
			#/home/grabli66/haxe/std/sys/Http.hx:363: lines 363-364
			if (!$this->noShutdown) {
				#/home/grabli66/haxe/std/sys/Http.hx:364: characters 5-30
				$sock->shutdown(false, true);
			}
			#/home/grabli66/haxe/std/sys/Http.hx:365: lines 365-372
			try {
				#/home/grabli66/haxe/std/sys/Http.hx:366: lines 366-370
				while (true) {
					#/home/grabli66/haxe/std/sys/Http.hx:367: characters 6-52
					$len = $sock->input->readBytes($buf, 0, 1024);
					#/home/grabli66/haxe/std/sys/Http.hx:368: characters 6-25
					if ($len === 0) {
						#/home/grabli66/haxe/std/sys/Http.hx:368: characters 20-25
						break;
					}
					#/home/grabli66/haxe/std/sys/Http.hx:369: characters 6-31
					$api->writeBytes($buf, 0, $len);
				}
			} catch (\Throwable $__hx__caught_e) {
				$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
				if ($__hx__real_e instanceof Eof) {
					$e1 = $__hx__real_e;
									} else  throw $__hx__caught_e;
			}
		} else {
			#/home/grabli66/haxe/std/sys/Http.hx:375: lines 375-383
			try {
				#/home/grabli66/haxe/std/sys/Http.hx:376: lines 376-380
				while ($size > 0) {
					#/home/grabli66/haxe/std/sys/Http.hx:377: characters 6-81
					$len1 = $sock->input->readBytes($buf, 0, ($size > 1024 ? 1024 : $size));
					#/home/grabli66/haxe/std/sys/Http.hx:378: characters 6-31
					$api->writeBytes($buf, 0, $len1);
					#/home/grabli66/haxe/std/sys/Http.hx:379: characters 6-17
					$size -= $len1;
				}
			} catch (\Throwable $__hx__caught_e) {
				$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
				if ($__hx__real_e instanceof Eof) {
					$e2 = $__hx__real_e;
					#/home/grabli66/haxe/std/sys/Http.hx:382: characters 5-10
					throw new HxException("Transfer aborted");
				} else  throw $__hx__caught_e;
			}
		}
		#/home/grabli66/haxe/std/sys/Http.hx:385: lines 385-386
		if ($chunked && (($this->chunk_size !== null) || ($this->chunk_buf !== null))) {
			#/home/grabli66/haxe/std/sys/Http.hx:386: characters 4-9
			throw new HxException("Invalid chunk");
		}
		#/home/grabli66/haxe/std/sys/Http.hx:387: lines 387-388
		if (($status < 200) || ($status >= 400)) {
			#/home/grabli66/haxe/std/sys/Http.hx:388: characters 4-9
			throw new HxException("Http Error #" . ($status??'null'));
		}
		#/home/grabli66/haxe/std/sys/Http.hx:389: characters 3-14
		$api->close();
	}

	/**
	 * @param bool $post
	 * 
	 * @return void
	 */
	public function request ($post = null) {
		#/home/grabli66/haxe/std/sys/Http.hx:45: lines 45-67
		$_gthis = $this;
		#/home/grabli66/haxe/std/sys/Http.hx:46: characters 3-42
		$output = new BytesOutput();
		#/home/grabli66/haxe/std/sys/Http.hx:47: characters 3-21
		$old = $this->onError;
		#/home/grabli66/haxe/std/sys/Http.hx:48: characters 3-19
		$err = false;
		#/home/grabli66/haxe/std/sys/Http.hx:49: lines 49-59
		$this->onError = function ($e)  use (&$err, &$old, &$_gthis, &$output) {
			#/home/grabli66/haxe/std/sys/Http.hx:53: characters 4-47
			$_gthis->responseData = $output->getBytes()->toString();
			#/home/grabli66/haxe/std/sys/Http.hx:55: characters 4-14
			$err = true;
			#/home/grabli66/haxe/std/sys/Http.hx:57: characters 4-17
			$_gthis->onError = $old;
			#/home/grabli66/haxe/std/sys/Http.hx:58: characters 4-14
			$_gthis->onError($e);
		};
		#/home/grabli66/haxe/std/sys/Http.hx:60: characters 3-29
		$this->customRequest($post, $output);
		#/home/grabli66/haxe/std/sys/Http.hx:61: lines 61-65
		if (!$err) {
			#/home/grabli66/haxe/std/sys/Http.hx:65: characters 4-55
			$this->onData($this->responseData = $output->getBytes()->toString());
		}
	}
}

Boot::registerClass(Http::class, 'sys.Http');
