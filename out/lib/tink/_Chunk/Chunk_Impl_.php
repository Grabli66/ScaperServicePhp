<?php
/**
 * Generated by Haxe 4.0.0-rc.3+e3df7a448
 */

namespace tink\_Chunk;

use \tink\chunk\ChunkObject;
use \tink\json\_Representation\Representation_Impl_;
use \haxe\io\_BytesData\Container;
use \php\Boot;
use \tink\chunk\ByteChunk;
use \tink\chunk\ChunkIterator;
use \haxe\io\Bytes;
use \tink\chunk\ChunkCursor;

final class Chunk_Impl_ {
	/**
	 * @var ChunkObject
	 */
	static public $EMPTY;

	/**
	 * @param ChunkObject $this
	 * @param Bytes $target
	 * @param int $offset
	 * 
	 * @return void
	 */
	static public function blitTo ($this1, $target, $offset) {
		#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_chunk/0.3.0/haxelib/src/tink/Chunk.hx:112: characters 12-39
		$this1->blitTo($target, $offset);
		#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_chunk/0.3.0/haxelib/src/tink/Chunk.hx:112: characters 5-39
		return;
	}

	/**
	 * @param ChunkObject $a
	 * @param ChunkObject $b
	 * 
	 * @return ChunkObject
	 */
	static public function catChunk ($a, $b) {
		#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_chunk/0.3.0/haxelib/src/tink/Chunk.hx:158: characters 5-23
		return Chunk_Impl_::concat($a, $b);
	}

	/**
	 * @param ChunkObject $this
	 * @param ChunkObject $that
	 * 
	 * @return ChunkObject
	 */
	static public function concat ($this1, $that) {
		#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_chunk/0.3.0/haxelib/src/tink/Chunk.hx:95: characters 28-39
		$_g = $that->getLength();
		#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_chunk/0.3.0/haxelib/src/tink/Chunk.hx:95: characters 20-26
		if ($this1->getLength() === 0) {
			#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_chunk/0.3.0/haxelib/src/tink/Chunk.hx:95: characters 28-39
			if ($_g === 0) {
				#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_chunk/0.3.0/haxelib/src/tink/Chunk.hx:96: characters 20-25
				return Chunk_Impl_::$EMPTY;
			} else {
				#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_chunk/0.3.0/haxelib/src/tink/Chunk.hx:97: characters 20-24
				return $that;
			}
		} else if ($_g === 0) {
			#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_chunk/0.3.0/haxelib/src/tink/Chunk.hx:98: characters 20-24
			return $this1;
		} else {
			#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_chunk/0.3.0/haxelib/src/tink/Chunk.hx:99: characters 15-44
			return new CompoundChunk($this1, $that);
		}
	}

	/**
	 * @param ChunkObject $this
	 * 
	 * @return ChunkCursor
	 */
	static public function cursor ($this1) {
		#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_chunk/0.3.0/haxelib/src/tink/Chunk.hx:103: characters 5-28
		return $this1->getCursor();
	}

	/**
	 * @param ChunkObject $this
	 * @param int $i
	 * 
	 * @return int
	 */
	static public function getByte ($this1, $i) {
		#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_chunk/0.3.0/haxelib/src/tink/Chunk.hx:92: characters 5-27
		return $this1->getByte($i);
	}

	/**
	 * @param ChunkObject $this
	 * 
	 * @return int
	 */
	static public function get_length ($this1) {
		#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_chunk/0.3.0/haxelib/src/tink/Chunk.hx:88: characters 7-30
		return $this1->getLength();
	}

	/**
	 * @param ChunkObject $this
	 * 
	 * @return ChunkIterator
	 */
	static public function iterator ($this1) {
		#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_chunk/0.3.0/haxelib/src/tink/Chunk.hx:106: characters 5-47
		return new ChunkIterator($this1->getCursor());
	}

	/**
	 * @param \Array_hx $chunks
	 * 
	 * @return ChunkObject
	 */
	static public function join ($chunks) {
		#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_chunk/0.3.0/haxelib/src/tink/Chunk.hx:129: lines 129-137
		if ($chunks === null) {
			#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_chunk/0.3.0/haxelib/src/tink/Chunk.hx:130: characters 23-28
			return Chunk_Impl_::$EMPTY;
		} else {
			#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_chunk/0.3.0/haxelib/src/tink/Chunk.hx:129: characters 19-25
			$__hx__switch = ($chunks->length);
			if ($__hx__switch === 0) {
				#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_chunk/0.3.0/haxelib/src/tink/Chunk.hx:130: characters 23-28
				return Chunk_Impl_::$EMPTY;
			} else if ($__hx__switch === 1) {
				#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_chunk/0.3.0/haxelib/src/tink/Chunk.hx:131: characters 17-18
				return ($chunks->arr[0] ?? null);
			} else {
				#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_chunk/0.3.0/haxelib/src/tink/Chunk.hx:133: characters 9-31
				$ret = Chunk_Impl_::catChunk(($chunks->arr[0] ?? null), ($chunks->arr[1] ?? null));
				#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_chunk/0.3.0/haxelib/src/tink/Chunk.hx:134: lines 134-135
				$_g = 2;
				$_g1 = $chunks->length;
				while ($_g < $_g1) {
					#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_chunk/0.3.0/haxelib/src/tink/Chunk.hx:135: characters 11-27
					$ret = Chunk_Impl_::catChunk($ret, ($chunks->arr[$_g++] ?? null));
				}

				#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_chunk/0.3.0/haxelib/src/tink/Chunk.hx:136: characters 9-12
				return $ret;
			}
		}
	}

	/**
	 * @param Bytes $a
	 * @param ChunkObject $b
	 * 
	 * @return ChunkObject
	 */
	static public function lcatBytes ($a, $b) {
		#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_chunk/0.3.0/haxelib/src/tink/Chunk.hx:167: characters 5-26
		return Chunk_Impl_::catChunk(ByteChunk::of($a), $b);
	}

	/**
	 * @param string $a
	 * @param ChunkObject $b
	 * 
	 * @return ChunkObject
	 */
	static public function lcatString ($a, $b) {
		#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_chunk/0.3.0/haxelib/src/tink/Chunk.hx:164: characters 21-22
		$b1 = strlen($a);
		#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_chunk/0.3.0/haxelib/src/tink/Chunk.hx:164: characters 5-26
		return Chunk_Impl_::catChunk(ByteChunk::of(new Bytes($b1, new Container($a))), $b);
	}

	/**
	 * @param Bytes $b
	 * 
	 * @return ChunkObject
	 */
	static public function ofBytes ($b) {
		#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_chunk/0.3.0/haxelib/src/tink/Chunk.hx:140: characters 5-43
		return ByteChunk::of($b);
	}

	/**
	 * @param string $s
	 * 
	 * @return ChunkObject
	 */
	static public function ofHex ($s) {
		#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_chunk/0.3.0/haxelib/src/tink/Chunk.hx:151: characters 5-32
		$length = mb_strlen($s) >> 1;
		#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_chunk/0.3.0/haxelib/src/tink/Chunk.hx:152: characters 5-37
		$bytes = Bytes::alloc($length);
		#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_chunk/0.3.0/haxelib/src/tink/Chunk.hx:153: characters 5-79
		$_g = 0;
		while ($_g < $length) {
			$i = $_g++;
			#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_chunk/0.3.0/haxelib/src/tink/Chunk.hx:153: characters 26-79
			$v = \Std::parseInt("0x" . (mb_substr($s, $i * 2, 2)??'null'));
			$this1 = $bytes->b;
			$this1->s = substr_replace($this1->s, chr($v), $i, 1);


		}

		#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_chunk/0.3.0/haxelib/src/tink/Chunk.hx:154: characters 5-17
		return ByteChunk::of($bytes);
	}

	/**
	 * @param Bytes $rep
	 * 
	 * @return ChunkObject
	 */
	static public function ofRepresentation ($rep) {
		#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_chunk/0.3.0/haxelib/src/tink/Chunk.hx:178: characters 12-30
		return ByteChunk::of(Representation_Impl_::get($rep));
	}

	/**
	 * @param string $s
	 * 
	 * @return ChunkObject
	 */
	static public function ofString ($s) {
		#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_chunk/0.3.0/haxelib/src/tink/Chunk.hx:143: characters 20-37
		$b = strlen($s);
		#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_chunk/0.3.0/haxelib/src/tink/Chunk.hx:143: characters 12-38
		return ByteChunk::of(new Bytes($b, new Container($s)));
	}

	/**
	 * @param ChunkObject $a
	 * @param Bytes $b
	 * 
	 * @return ChunkObject
	 */
	static public function rcatBytes ($a, $b) {
		#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_chunk/0.3.0/haxelib/src/tink/Chunk.hx:170: characters 5-26
		return Chunk_Impl_::catChunk($a, ByteChunk::of($b));
	}

	/**
	 * @param ChunkObject $a
	 * @param string $b
	 * 
	 * @return ChunkObject
	 */
	static public function rcatString ($a, $b) {
		#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_chunk/0.3.0/haxelib/src/tink/Chunk.hx:161: characters 24-25
		$b1 = strlen($b);
		#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_chunk/0.3.0/haxelib/src/tink/Chunk.hx:161: characters 5-26
		return Chunk_Impl_::catChunk($a, ByteChunk::of(new Bytes($b1, new Container($b))));
	}

	/**
	 * @param ChunkObject $this
	 * @param int $from
	 * @param int $to
	 * 
	 * @return ChunkObject
	 */
	static public function slice ($this1, $from, $to) {
		#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_chunk/0.3.0/haxelib/src/tink/Chunk.hx:109: characters 5-32
		return $this1->slice($from, $to);
	}

	/**
	 * @param ChunkObject $this
	 * 
	 * @return Bytes
	 */
	static public function toBytes ($this1) {
		#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_chunk/0.3.0/haxelib/src/tink/Chunk.hx:121: characters 5-26
		return $this1->toBytes();
	}

	/**
	 * @param ChunkObject $this
	 * 
	 * @return string
	 */
	static public function toHex ($this1) {
		#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_chunk/0.3.0/haxelib/src/tink/Chunk.hx:115: characters 12-34
		return bin2hex($this1->toBytes()->b->s);
	}

	/**
	 * @param ChunkObject $this
	 * 
	 * @return Bytes
	 */
	static public function toRepresentation ($this1) {
		#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_chunk/0.3.0/haxelib/src/tink/Chunk.hx:175: characters 12-51
		return $this1->toBytes();
	}

	/**
	 * @param ChunkObject $this
	 * 
	 * @return string
	 */
	static public function toString ($this1) {
		#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_chunk/0.3.0/haxelib/src/tink/Chunk.hx:118: characters 5-27
		return $this1->toString();
	}

	/**
	 * @internal
	 * @access private
	 */
	static public function __hx__init ()
	{
		static $called = false;
		if ($called) return;
		$called = true;


		self::$EMPTY = new EmptyChunk();
	}
}

Boot::registerClass(Chunk_Impl_::class, 'tink._Chunk.Chunk_Impl_');
Boot::registerGetters('tink\\_Chunk\\Chunk_Impl_', [
	'length' => true
]);
Chunk_Impl_::__hx__init();
