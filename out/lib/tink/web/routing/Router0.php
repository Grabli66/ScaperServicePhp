<?php
/**
 * Generated by Haxe 4.0.0-rc.3+e3df7a448
 */

namespace tink\web\routing;

use \php\_Boot\HxAnon;
use \tink\core\_Future\SyncFuture;
use \php\Boot;
use \tink\url\_Query\QueryStringParser;
use \tink\core\TypedError;
use \tink\core\Outcome;
use \tink\querystring\Parser0;
use \tink\core\_Lazy\LazyConst;
use \tink\json\Writer0;
use \tink\web\routing\_Response\Response_Impl_;
use \tink\core\_Promise\Promise_Impl_;
use \tink\core\_Future\FutureObject;

class Router0 {
	/**
	 * @var \Root
	 */
	public $target;

	/**
	 * @param \Root $target
	 * 
	 * @return void
	 */
	public function __construct ($target) {
		#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_web/0.1.5/haxelib/src/tink/web/macros/Routing.hx:218: characters 11-31
		$this->target = $target;
	}

	/**
	 * @param Context $ctx
	 * 
	 * @return FutureObject
	 */
	public function parseXpath ($ctx) {
		#src/Main.hx:52: lines 52-81
		$_gthis = $this;
		return Promise_Impl_::next(new SyncFuture(new LazyConst((new Parser0(null, new HxAnon([
			"fileName" => "src/Main.hx",
			"lineNumber" => 52,
			"className" => "tink.web.routing.Router0",
			"methodName" => "parseXpath",
		])))->tryParse(new QueryStringParser($ctx->request->header->url->query, "&", "=", 0)))), function ($query)  use (&$_gthis, &$ctx) {
			return Promise_Impl_::next($_gthis->target->parseXpath($query), function ($__data__)  use (&$ctx) {
				if (($ctx->accepts)("application/json")) {
					return new SyncFuture(new LazyConst(Outcome::Success(Response_Impl_::textual(null, "application/json", (new Writer0())->write($__data__)))));
				}
				return new SyncFuture(new LazyConst(Outcome::Failure(new TypedError(415, "Unsupported Media Type", new HxAnon([
					"fileName" => "src/Main.hx",
					"lineNumber" => 52,
					"className" => "tink.web.routing.Router0",
					"methodName" => "parseXpath",
				])))));
			});
		});
	}

	/**
	 * @param Context $ctx
	 * 
	 * @return FutureObject
	 */
	public function route ($ctx) {
		#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_web/0.1.5/haxelib/src/tink/web/macros/Routing.hx:222: characters 11-34
		$l = $ctx->parts->length - $ctx->depth;
		#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_web/0.1.5/haxelib/src/tink/web/macros/Routing.hx:140: characters 22-41
		$_g2 = $ctx->part(0);
		#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_web/0.1.5/haxelib/src/tink/web/macros/Routing.hx:137: characters 22-39
		if ($ctx->request->header->method === "GET") {
			#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_web/0.1.5/haxelib/src/tink/web/macros/Routing.hx:140: characters 22-41
			if ($_g2 === "xpath") {
				#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_web/0.1.5/haxelib/src/tink/web/macros/Routing.hx:143: characters 22-31
				if (($l > 0) === true) {
					if (($l > 1) === false) {
						#src/Main.hx:51: characters 8-16
						return Promise_Impl_::ofSpecific($this->parseXpath($ctx));
					} else {
						#src/Main.hx:41: characters 20-32
						$this1 = $ctx->request->header->url;
						return new SyncFuture(new LazyConst(Outcome::Failure(new TypedError(404, "Not Found: [" . ($ctx->request->header->method??'null') . "] " . ((($this1->query === null ? $this1->path : ($this1->path??'null') . "?" . ($this1->query??'null')))??'null'), new HxAnon([
							"fileName" => "src/Main.hx",
							"lineNumber" => 41,
							"className" => "tink.web.routing.Router0",
							"methodName" => "route",
						])))));
					}
				} else {
					$this2 = $ctx->request->header->url;
					return new SyncFuture(new LazyConst(Outcome::Failure(new TypedError(404, "Not Found: [" . ($ctx->request->header->method??'null') . "] " . ((($this2->query === null ? $this2->path : ($this2->path??'null') . "?" . ($this2->query??'null')))??'null'), new HxAnon([
						"fileName" => "src/Main.hx",
						"lineNumber" => 41,
						"className" => "tink.web.routing.Router0",
						"methodName" => "route",
					])))));
				}
			} else {
				$this3 = $ctx->request->header->url;
				return new SyncFuture(new LazyConst(Outcome::Failure(new TypedError(404, "Not Found: [" . ($ctx->request->header->method??'null') . "] " . ((($this3->query === null ? $this3->path : ($this3->path??'null') . "?" . ($this3->query??'null')))??'null'), new HxAnon([
					"fileName" => "src/Main.hx",
					"lineNumber" => 41,
					"className" => "tink.web.routing.Router0",
					"methodName" => "route",
				])))));
			}
		} else {
			$this4 = $ctx->request->header->url;
			return new SyncFuture(new LazyConst(Outcome::Failure(new TypedError(404, "Not Found: [" . ($ctx->request->header->method??'null') . "] " . ((($this4->query === null ? $this4->path : ($this4->path??'null') . "?" . ($this4->query??'null')))??'null'), new HxAnon([
				"fileName" => "src/Main.hx",
				"lineNumber" => 41,
				"className" => "tink.web.routing.Router0",
				"methodName" => "route",
			])))));
		}
	}
}

Boot::registerClass(Router0::class, 'tink.web.routing.Router0');
