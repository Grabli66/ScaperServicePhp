<?php
/**
 * Generated by Haxe 4.0.0-rc.3+e3df7a448
 */

namespace tink\web\routing;

use \tink\http\IncomingRequest;
use \php\_Boot\HxAnon;
use \tink\core\_Lazy\LazyFunc;
use \tink\core\_Future\SyncFuture;
use \tink\io\RealSourceTools;
use \tink\querystring\_Pairs\Pairs_Impl_;
use \tink\core\NamedWith;
use \php\Boot;
use \tink\url\_Query\QueryStringParser;
use \tink\io\_Source\Source_Impl_;
use \tink\core\TypedError;
use \tink\http\Header;
use \tink\streams\StreamObject;
use \tink\url\_Query\Query_Impl_;
use \tink\core\Outcome;
use \tink\url\_Path\Path_Impl_;
use \tink\core\_Lazy\LazyConst;
use \tink\http\IncomingRequestHeader;
use \tink\core\_Promise\Next_Impl_;
use \tink\http\_Header\HeaderValue_Impl_;
use \haxe\ds\StringMap;
use \tink\core\_Promise\Promise_Impl_;
use \tink\core\_Future\FutureObject;
use \tink\http\BodyPart;
use \tink\url\_Portion\Portion_Impl_;

class Context {
	/**
	 * @var \Closure
	 */
	public $accepts;
	/**
	 * @var int
	 */
	public $depth;
	/**
	 * @var StringMap
	 */
	public $params;
	/**
	 * @var Context
	 */
	public $parent;
	/**
	 * @var \Array_hx
	 */
	public $parts;
	/**
	 * @var IncomingRequest
	 */
	public $request;

	/**
	 * @param string $s
	 * 
	 * @return bool
	 */
	static public function acceptsAll ($s) {
		#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_web/0.1.5/haxelib/src/tink/web/routing/Context.hx:167: characters 40-51
		return true;
	}

	/**
	 * @param IncomingRequest $request
	 * @param \Closure $getSession
	 * 
	 * @return AuthedContext
	 */
	static public function authed ($request, $getSession) {
		#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_web/0.1.5/haxelib/src/tink/web/routing/Context.hx:150: characters 7-40
		$tmp = Context::parseAcceptHeader($request->header);
		#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_web/0.1.5/haxelib/src/tink/web/routing/Context.hx:153: characters 7-38
		$tmp1 = Path_Impl_::parts($request->header->url->path);
		#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_web/0.1.5/haxelib/src/tink/web/routing/Context.hx:155: characters 7-22
		$f = $getSession;
		$a1 = $request->header;
		$tmp2 = new LazyFunc(function ()  use (&$f, &$a1) {
			return $f($a1);
		});
		#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_web/0.1.5/haxelib/src/tink/web/routing/Context.hx:148: lines 148-156
		return new AuthedContext(null, $tmp, $request, 0, $tmp1, Query_Impl_::toMap($request->header->url->query), $tmp2);
	}

	/**
	 * @param IncomingRequest $request
	 * 
	 * @return Context
	 */
	static public function ofRequest ($request) {
		#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_web/0.1.5/haxelib/src/tink/web/routing/Context.hx:140: characters 7-40
		$tmp = Context::parseAcceptHeader($request->header);
		#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_web/0.1.5/haxelib/src/tink/web/routing/Context.hx:143: characters 7-38
		$tmp1 = Path_Impl_::parts($request->header->url->path);
		#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_web/0.1.5/haxelib/src/tink/web/routing/Context.hx:138: lines 138-145
		return new Context(null, $tmp, $request, 0, $tmp1, Query_Impl_::toMap($request->header->url->query));
	}

	/**
	 * @param Header $h
	 * 
	 * @return \Closure
	 */
	static public function parseAcceptHeader ($h) {
		#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_web/0.1.5/haxelib/src/tink/web/routing/Context.hx:159: characters 19-32
		$_g = $h->get("accept");
		if ($_g->length === 0) {
			#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_web/0.1.5/haxelib/src/tink/web/routing/Context.hx:160: characters 16-26
			return Boot::getStaticClosure(Context::class, 'acceptsAll');
		} else {
			#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_web/0.1.5/haxelib/src/tink/web/routing/Context.hx:162: characters 67-85
			$accepted_data = [];
			#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_web/0.1.5/haxelib/src/tink/web/routing/Context.hx:162: characters 25-85
			$_g1 = 0;
			while ($_g1 < $_g->length) {
				#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_web/0.1.5/haxelib/src/tink/web/routing/Context.hx:162: characters 43-85
				$_g11 = 0;
				$_g2 = HeaderValue_Impl_::parse(($_g->arr[$_g1++] ?? null));
				while ($_g11 < $_g2->length) {
					#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_web/0.1.5/haxelib/src/tink/web/routing/Context.hx:162: characters 67-85
					$accepted_data[$_g2[$_g11++]->value] = true;
				}
			}
			#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_web/0.1.5/haxelib/src/tink/web/routing/Context.hx:163: lines 163-164
			if (($accepted_data["*/*"] ?? null)) {
				#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_web/0.1.5/haxelib/src/tink/web/routing/Context.hx:163: characters 30-40
				return Boot::getStaticClosure(Context::class, 'acceptsAll');
			} else {
				#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_web/0.1.5/haxelib/src/tink/web/routing/Context.hx:164: characters 14-52
				return function ($t)  use (&$accepted_data) {
					#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_web/0.1.5/haxelib/src/tink/web/routing/Context.hx:164: characters 27-52
					return array_key_exists($t, $accepted_data);
				};
			}
		}
	}

	/**
	 * @param string $header
	 * 
	 * @return string
	 */
	static public function toCamelCase ($header) {
		#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_web/0.1.5/haxelib/src/tink/web/routing/Context.hx:55: characters 5-32
		$header1 = $header;
		#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_web/0.1.5/haxelib/src/tink/web/routing/Context.hx:56: lines 56-58
		$ret = new \StringBuf();
		$pos = 0;
		$max = mb_strlen($header1);
		#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_web/0.1.5/haxelib/src/tink/web/routing/Context.hx:60: lines 60-68
		while ($pos < $max) {
			#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_web/0.1.5/haxelib/src/tink/web/routing/Context.hx:61: characters 14-38
			$_g = \StringTools::fastCodeAt($header1, $pos++);
			if ($_g === 45) {
				#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_web/0.1.5/haxelib/src/tink/web/routing/Context.hx:63: lines 63-64
				if ($pos < $max) {
					#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_web/0.1.5/haxelib/src/tink/web/routing/Context.hx:64: characters 35-40
					$index = $pos++;
					#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_web/0.1.5/haxelib/src/tink/web/routing/Context.hx:64: characters 13-56
					$ret->add(mb_strtolower(($index < 0 ? "" : mb_substr($header1, $index, 1))));
				}
			} else {
				#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_web/0.1.5/haxelib/src/tink/web/routing/Context.hx:66: characters 11-25
				$ret->b = ($ret->b??'null') . (mb_chr($_g)??'null');
			}
		}
		#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_web/0.1.5/haxelib/src/tink/web/routing/Context.hx:70: characters 5-26
		return $ret->b;
	}

	/**
	 * @param Context $parent
	 * @param \Closure $accepts
	 * @param IncomingRequest $request
	 * @param int $depth
	 * @param \Array_hx $parts
	 * @param StringMap $params
	 * 
	 * @return void
	 */
	public function __construct ($parent, $accepts, $request, $depth, $parts, $params) {
		#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_web/0.1.5/haxelib/src/tink/web/routing/Context.hx:126: characters 5-25
		$this->parent = $parent;
		#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_web/0.1.5/haxelib/src/tink/web/routing/Context.hx:127: characters 5-27
		$this->accepts = $accepts;
		#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_web/0.1.5/haxelib/src/tink/web/routing/Context.hx:128: characters 5-27
		$this->request = $request;
		#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_web/0.1.5/haxelib/src/tink/web/routing/Context.hx:129: characters 5-23
		$this->depth = $depth;
		#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_web/0.1.5/haxelib/src/tink/web/routing/Context.hx:130: characters 5-23
		$this->parts = $parts;
		#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_web/0.1.5/haxelib/src/tink/web/routing/Context.hx:131: characters 5-25
		$this->params = $params;
	}

	/**
	 * @return FutureObject
	 */
	public function allRaw () {
		#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_web/0.1.5/haxelib/src/tink/web/routing/Context.hx:41: characters 12-19
		$_g = $this->request->body;
		#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_web/0.1.5/haxelib/src/tink/web/routing/Context.hx:41: characters 5-25
		return RealSourceTools::all(($_g->index === 0 ? $_g->params[0] : Source_Impl_::ofError(new TypedError(501, "not implemented", new HxAnon([
			"fileName" => "tink/web/routing/Context.hx",
			"lineNumber" => 47,
			"className" => "tink.web.routing.Context",
			"methodName" => "get_rawBody",
		])))));
	}

	/**
	 * @return \Array_hx
	 */
	public function getPath () {
		#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_web/0.1.5/haxelib/src/tink/web/routing/Context.hx:114: characters 5-40
		return $this->parts->slice($this->depth);
	}

	/**
	 * @return \Array_hx
	 */
	public function getPrefix () {
		#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_web/0.1.5/haxelib/src/tink/web/routing/Context.hx:111: characters 5-43
		return $this->parts->slice(0, $this->depth);
	}

	/**
	 * @return IncomingRequestHeader
	 */
	public function get_header () {
		#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_web/0.1.5/haxelib/src/tink/web/routing/Context.hx:35: characters 7-28
		return $this->request->header;
	}

	/**
	 * @return int
	 */
	public function get_pathLength () {
		#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_web/0.1.5/haxelib/src/tink/web/routing/Context.hx:108: characters 7-44
		return $this->parts->length - $this->depth;
	}

	/**
	 * @return StreamObject
	 */
	public function get_rawBody () {
		#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_web/0.1.5/haxelib/src/tink/web/routing/Context.hx:45: characters 21-38
		$_g = $this->request->body;
		if ($_g->index === 0) {
			#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_web/0.1.5/haxelib/src/tink/web/routing/Context.hx:46: characters 24-25
			return $_g->params[0];
		} else {
			#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_web/0.1.5/haxelib/src/tink/web/routing/Context.hx:47: characters 9-62
			return Source_Impl_::ofError(new TypedError(501, "not implemented", new HxAnon([
				"fileName" => "tink/web/routing/Context.hx",
				"lineNumber" => 47,
				"className" => "tink.web.routing.Context",
				"methodName" => "get_rawBody",
			])));
		}
	}

	/**
	 * @param string $name
	 * 
	 * @return bool
	 */
	public function hasParam ($name) {
		#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_web/0.1.5/haxelib/src/tink/web/routing/Context.hx:117: characters 12-36
		return array_key_exists($name, $this->params->data);
	}

	/**
	 * @return object
	 */
	public function headers () {
		#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_web/0.1.5/haxelib/src/tink/web/routing/Context.hx:51: characters 12-71
		$_g = new \Array_hx();
		#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_web/0.1.5/haxelib/src/tink/web/routing/Context.hx:51: characters 23-29
		$f = $this->request->header->fields->iterator();
		while ($f->hasNext()) {
			#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_web/0.1.5/haxelib/src/tink/web/routing/Context.hx:51: characters 13-70
			$f1 = $f->next();
			#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_web/0.1.5/haxelib/src/tink/web/routing/Context.hx:51: characters 41-60
			$x = Context::toCamelCase($f1->name);
			#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_web/0.1.5/haxelib/src/tink/web/routing/Context.hx:51: characters 31-70
			$_g->arr[$_g->length] = new NamedWith($x, $f1->value);
			++$_g->length;
		}

		#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_web/0.1.5/haxelib/src/tink/web/routing/Context.hx:51: characters 5-71
		return Pairs_Impl_::ofIterable($_g);
	}

	/**
	 * @param string $name
	 * 
	 * @return string
	 */
	public function param ($name) {
		#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_web/0.1.5/haxelib/src/tink/web/routing/Context.hx:123: characters 5-29
		return Portion_Impl_::stringly(($this->params->data[$name] ?? null));
	}

	/**
	 * @return FutureObject
	 */
	public function parse () {
		#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_web/0.1.5/haxelib/src/tink/web/routing/Context.hx:74: characters 19-36
		$_g = $this->request->body;
		$__hx__switch = ($_g->index);
		if ($__hx__switch === 0) {
			#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_web/0.1.5/haxelib/src/tink/web/routing/Context.hx:76: characters 18-21
			$src = $_g->params[0];
			#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_web/0.1.5/haxelib/src/tink/web/routing/Context.hx:102: characters 11-22
			return (function ()  use (&$src) {
				#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_web/0.1.5/haxelib/src/tink/web/routing/Context.hx:78: lines 78-80
				return Promise_Impl_::next(RealSourceTools::all($src), Next_Impl_::ofSafeSync(function ($chunk) {
					#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_web/0.1.5/haxelib/src/tink/web/routing/Context.hx:80: characters 63-145
					$_g1 = new \Array_hx();
					#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_web/0.1.5/haxelib/src/tink/web/routing/Context.hx:80: characters 64-144
					$part = new QueryStringParser($chunk->toString(), "&", "=", 0);
					while ($part->hasNext()) {
						$part1 = $part->next();
						#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_web/0.1.5/haxelib/src/tink/web/routing/Context.hx:80: characters 115-124
						$part2 = $part1->name;
						#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_web/0.1.5/haxelib/src/tink/web/routing/Context.hx:80: characters 105-144
						$x = new NamedWith($part2, BodyPart::Value(Portion_Impl_::stringly($part1->value)));
						$_g1->arr[$_g1->length] = $x;
						++$_g1->length;
					}

					#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_web/0.1.5/haxelib/src/tink/web/routing/Context.hx:80: characters 63-145
					return $_g1;
				}));
			})();
		} else if ($__hx__switch === 1) {
			#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_web/0.1.5/haxelib/src/tink/web/routing/Context.hx:75: characters 7-32
			return new SyncFuture(new LazyConst(Outcome::Success($_g->params[0])));
		}
	}

	/**
	 * @param int $index
	 * 
	 * @return string
	 */
	public function part ($index) {
		#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_web/0.1.5/haxelib/src/tink/web/routing/Context.hx:120: characters 12-94
		if (($this->depth + $index) >= $this->parts->length) {
			#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_web/0.1.5/haxelib/src/tink/web/routing/Context.hx:120: characters 56-58
			return "";
		} else {
			#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_web/0.1.5/haxelib/src/tink/web/routing/Context.hx:120: characters 64-94
			return Portion_Impl_::stringly(($this->parts->arr[$this->depth + $index] ?? null));
		}
	}

	/**
	 * @param int $descend
	 * 
	 * @return Context
	 */
	public function sub ($descend) {
		#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_web/0.1.5/haxelib/src/tink/web/routing/Context.hx:135: characters 5-104
		return new Context($this, $this->accepts, $this->request, $this->depth + $descend, $this->parts, $this->params);
	}
}

Boot::registerClass(Context::class, 'tink.web.routing.Context');
Boot::registerGetters('tink\\web\\routing\\Context', [
	'pathLength' => true,
	'rawBody' => true,
	'header' => true
]);
