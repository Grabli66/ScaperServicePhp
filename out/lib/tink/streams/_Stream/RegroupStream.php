<?php
/**
 * Generated by Haxe 4.0.0-rc.3+e3df7a4
 */

namespace tink\streams\_Stream;

use \tink\core\_Lazy\LazyFunc;
use \tink\streams\RegroupStatus;
use \php\Boot;
use \tink\streams\StreamObject;
use \tink\streams\Handled;
use \tink\streams\Empty_hx;

class RegroupStream extends CompoundStream {
	/**
	 * @param StreamObject $source
	 * @param object $f
	 * @param StreamObject $prev
	 * 
	 * @return void
	 */
	public function __construct ($source, $f, $prev = null) {
		#/home/grabli66/haxelib/tink_streams/git/src/tink/streams/Stream.hx:98: characters 5-41
		if ($prev === null) {
			#/home/grabli66/haxelib/tink_streams/git/src/tink/streams/Stream.hx:98: characters 22-41
			$prev = Empty_hx::$inst;
		}
		#/home/grabli66/haxelib/tink_streams/git/src/tink/streams/Stream.hx:100: characters 5-20
		$ret = null;
		#/home/grabli66/haxelib/tink_streams/git/src/tink/streams/Stream.hx:101: characters 5-28
		$terminated = false;
		#/home/grabli66/haxelib/tink_streams/git/src/tink/streams/Stream.hx:102: characters 5-18
		$buf = new \Array_hx();
		#/home/grabli66/haxelib/tink_streams/git/src/tink/streams/Stream.hx:134: characters 5-24
		parent::__construct(\Array_hx::wrap([
			$prev,
			Stream_Impl_::flatten($source->forEach(Handler_Impl_::ofUnknown(function ($item)  use (&$terminated, &$f, &$buf, &$ret) {
				#/home/grabli66/haxelib/tink_streams/git/src/tink/streams/Stream.hx:104: characters 7-21
				$buf->arr[$buf->length] = $item;
				++$buf->length;

				#/home/grabli66/haxelib/tink_streams/git/src/tink/streams/Stream.hx:105: lines 105-117
				return $f->apply($buf, RegroupStatus::Flowing())->map(function ($o)  use (&$terminated, &$ret) {
					$__hx__switch = ($o->index);
					if ($__hx__switch === 0) {
						#/home/grabli66/haxelib/tink_streams/git/src/tink/streams/Stream.hx:107: characters 11-18
						$ret = $o->params[0];
						#/home/grabli66/haxelib/tink_streams/git/src/tink/streams/Stream.hx:108: characters 11-17
						return Handled::Finish();
					} else if ($__hx__switch === 1) {
						#/home/grabli66/haxelib/tink_streams/git/src/tink/streams/Stream.hx:109: characters 25-26
						$_g2 = $o->params[0];
						#/home/grabli66/haxelib/tink_streams/git/src/tink/streams/Stream.hx:110: characters 17-33
						$ret = ($_g2->index === 0 ? $_g2->params[0] : (new LazyFunc(Boot::getStaticClosure(Empty_hx::class, 'make')))->get());
						#/home/grabli66/haxelib/tink_streams/git/src/tink/streams/Stream.hx:111: characters 11-28
						$terminated = true;
						#/home/grabli66/haxelib/tink_streams/git/src/tink/streams/Stream.hx:112: characters 11-17
						return Handled::Finish();
					} else if ($__hx__switch === 2) {
						#/home/grabli66/haxelib/tink_streams/git/src/tink/streams/Stream.hx:114: characters 11-17
						return Handled::Resume();
					} else if ($__hx__switch === 3) {
						#/home/grabli66/haxelib/tink_streams/git/src/tink/streams/Stream.hx:116: characters 11-18
						return Handled::Clog($o->params[0]);
					}
				})->gather();
			}))->map(function ($o1)  use (&$terminated, &$f, &$buf, &$ret) {
				#/home/grabli66/haxelib/tink_streams/git/src/tink/streams/Stream.hx:118: lines 118-131
				$__hx__switch = ($o1->index);
				if ($__hx__switch === 0) {
					#/home/grabli66/haxelib/tink_streams/git/src/tink/streams/Stream.hx:128: lines 128-129
					if ($terminated) {
						#/home/grabli66/haxelib/tink_streams/git/src/tink/streams/Stream.hx:128: characters 38-41
						return $ret;
					} else {
						#/home/grabli66/haxelib/tink_streams/git/src/tink/streams/Stream.hx:129: characters 26-57
						return new RegroupStream($o1->params[0], $f, $ret);
					}
				} else if ($__hx__switch === 1) {
					#/home/grabli66/haxelib/tink_streams/git/src/tink/streams/Stream.hx:130: characters 30-66
					return new CloggedStream(Stream_Impl_::ofError($o1->params[0]), $o1->params[1]);
				} else if ($__hx__switch === 2) {
					#/home/grabli66/haxelib/tink_streams/git/src/tink/streams/Stream.hx:119: characters 23-40
					return Stream_Impl_::ofError($o1->params[0]);
				} else if ($__hx__switch === 3) {
					#/home/grabli66/haxelib/tink_streams/git/src/tink/streams/Stream.hx:120: lines 120-127
					if ($buf->length === 0) {
						#/home/grabli66/haxelib/tink_streams/git/src/tink/streams/Stream.hx:120: characters 42-54
						return Empty_hx::$inst;
					} else {
						#/home/grabli66/haxelib/tink_streams/git/src/tink/streams/Stream.hx:122: lines 122-127
						return Stream_Impl_::flatten($f->apply($buf, RegroupStatus::Ended())->map(function ($o2) {
							$__hx__switch = ($o2->index);
							if ($__hx__switch === 0) {
								#/home/grabli66/haxelib/tink_streams/git/src/tink/streams/Stream.hx:123: characters 30-31
								return $o2->params[0];
							} else if ($__hx__switch === 1) {
								#/home/grabli66/haxelib/tink_streams/git/src/tink/streams/Stream.hx:124: characters 27-28
								$_g21 = $o2->params[0];
								#/home/grabli66/haxelib/tink_streams/git/src/tink/streams/Stream.hx:124: characters 31-47
								if ($_g21->index === 0) {
									return $_g21->params[0];
								} else {
									return (new LazyFunc(Boot::getStaticClosure(Empty_hx::class, 'make')))->get();
								}
							} else if ($__hx__switch === 2) {
								#/home/grabli66/haxelib/tink_streams/git/src/tink/streams/Stream.hx:125: characters 27-39
								return Empty_hx::$inst;
							} else if ($__hx__switch === 3) {
								#/home/grabli66/haxelib/tink_streams/git/src/tink/streams/Stream.hx:126: characters 28-50
								return Stream_Impl_::ofError($o2->params[0]);
							}
						})->gather());
					}
				}
			})->gather()),
		]));
	}
}

Boot::registerClass(RegroupStream::class, 'tink.streams._Stream.RegroupStream');
