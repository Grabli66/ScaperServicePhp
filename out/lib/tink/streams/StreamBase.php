<?php
/**
 * Generated by Haxe 4.0.0-rc.3+e3df7a4
 */

namespace tink\streams;

use \tink\streams\_Stream\RegroupStream;
use \php\Boot;
use \tink\streams\_Stream\Handler_Impl_;
use \tink\core\_Future\Future_Impl_;
use \php\_Boot\HxException;
use \tink\core\_Future\FutureObject;
use \tink\streams\_Stream\CompoundStream;

class StreamBase implements StreamObject {
	/**
	 * @var int
	 */
	public $retainCount;

	/**
	 * @return void
	 */
	public function __construct () {
		#/home/grabli66/haxelib/tink_streams/git/src/tink/streams/Stream.hx:335: characters 21-22
		$this->retainCount = 0;
	}

	/**
	 * @param StreamObject $other
	 * 
	 * @return StreamObject
	 */
	public function append ($other) {
		#/home/grabli66/haxelib/tink_streams/git/src/tink/streams/Stream.hx:375: lines 375-376
		if ($this->get_depleted()) {
			#/home/grabli66/haxelib/tink_streams/git/src/tink/streams/Stream.hx:375: characters 21-26
			return $other;
		} else {
			#/home/grabli66/haxelib/tink_streams/git/src/tink/streams/Stream.hx:376: characters 12-44
			return CompoundStream::of(\Array_hx::wrap([
				$this,
				$other,
			]));
		}
	}

	/**
	 * @param StreamObject $other
	 * 
	 * @return StreamObject
	 */
	public function blend ($other) {
		#/home/grabli66/haxelib/tink_streams/git/src/tink/streams/Stream.hx:385: lines 385-386
		if ($this->get_depleted()) {
			#/home/grabli66/haxelib/tink_streams/git/src/tink/streams/Stream.hx:385: characters 21-26
			return $other;
		} else {
			#/home/grabli66/haxelib/tink_streams/git/src/tink/streams/Stream.hx:386: characters 12-40
			return new BlendStream($this, $other);
		}
	}

	/**
	 * @param \Array_hx $into
	 * 
	 * @return void
	 */
	public function decompose ($into) {
		#/home/grabli66/haxelib/tink_streams/git/src/tink/streams/Stream.hx:389: lines 389-390
		if (!$this->get_depleted()) {
			#/home/grabli66/haxelib/tink_streams/git/src/tink/streams/Stream.hx:390: characters 7-22
			$into->arr[$into->length] = $this;
			++$into->length;
		}
	}

	/**
	 * @return void
	 */
	public function destroy () {
	}

	/**
	 * @param object $f
	 * 
	 * @return StreamObject
	 */
	public function filter ($f) {
		#/home/grabli66/haxelib/tink_streams/git/src/tink/streams/Stream.hx:369: characters 5-22
		return $this->regroup($f);
	}

	/**
	 * @param \Closure $handler
	 * 
	 * @return FutureObject
	 */
	public function forEach ($handler) {
		#/home/grabli66/haxelib/tink_streams/git/src/tink/streams/Stream.hx:414: characters 12-17
		throw new HxException("not implemented");
	}

	/**
	 * @return bool
	 */
	public function get_depleted () {
		#/home/grabli66/haxelib/tink_streams/git/src/tink/streams/Stream.hx:333: characters 29-41
		return false;
	}

	/**
	 * @param \Closure $rescue
	 * 
	 * @return StreamObject
	 */
	public function idealize ($rescue) {
		#/home/grabli66/haxelib/tink_streams/git/src/tink/streams/Stream.hx:394: lines 394-395
		if ($this->get_depleted()) {
			#/home/grabli66/haxelib/tink_streams/git/src/tink/streams/Stream.hx:394: characters 21-33
			return Empty_hx::$inst;
		} else {
			#/home/grabli66/haxelib/tink_streams/git/src/tink/streams/Stream.hx:395: characters 12-44
			return new IdealizeStream($this, $rescue);
		}
	}

	/**
	 * @param object $f
	 * 
	 * @return StreamObject
	 */
	public function map ($f) {
		#/home/grabli66/haxelib/tink_streams/git/src/tink/streams/Stream.hx:366: characters 5-22
		return $this->regroup($f);
	}

	/**
	 * @return FutureObject
	 */
	public function next () {
		#/home/grabli66/haxelib/tink_streams/git/src/tink/streams/Stream.hx:350: characters 5-10
		throw new HxException("not implemented");
	}

	/**
	 * @param StreamObject $other
	 * 
	 * @return StreamObject
	 */
	public function prepend ($other) {
		#/home/grabli66/haxelib/tink_streams/git/src/tink/streams/Stream.hx:380: lines 380-381
		if ($this->get_depleted()) {
			#/home/grabli66/haxelib/tink_streams/git/src/tink/streams/Stream.hx:380: characters 21-26
			return $other;
		} else {
			#/home/grabli66/haxelib/tink_streams/git/src/tink/streams/Stream.hx:381: characters 12-44
			return CompoundStream::of(\Array_hx::wrap([
				$other,
				$this,
			]));
		}
	}

	/**
	 * @param mixed $initial
	 * @param \Closure $reducer
	 * 
	 * @return FutureObject
	 */
	public function reduce ($initial, $reducer) {
		#/home/grabli66/haxelib/tink_streams/git/src/tink/streams/Stream.hx:397: lines 397-411
		$_gthis = $this;
		#/home/grabli66/haxelib/tink_streams/git/src/tink/streams/Stream.hx:398: lines 398-411
		return Future_Impl_::async(function ($cb)  use (&$reducer, &$_gthis, &$initial) {
			#/home/grabli66/haxelib/tink_streams/git/src/tink/streams/Stream.hx:399: lines 399-410
			$_gthis->forEach(Handler_Impl_::ofUnknown(function ($item)  use (&$reducer, &$initial) {
				#/home/grabli66/haxelib/tink_streams/git/src/tink/streams/Stream.hx:400: lines 400-404
				return $reducer($initial, $item)->map(function ($o)  use (&$initial) {
					#/home/grabli66/haxelib/tink_streams/git/src/tink/streams/Stream.hx:401: lines 401-404
					$__hx__switch = ($o->index);
					if ($__hx__switch === 0) {
						#/home/grabli66/haxelib/tink_streams/git/src/tink/streams/Stream.hx:402: characters 31-42
						$initial = $o->params[0];
						#/home/grabli66/haxelib/tink_streams/git/src/tink/streams/Stream.hx:402: characters 44-50
						return Handled::Resume();
					} else if ($__hx__switch === 1) {
						#/home/grabli66/haxelib/tink_streams/git/src/tink/streams/Stream.hx:403: characters 28-35
						return Handled::Clog($o->params[0]);
					}
				})->gather();
			}))->handle(function ($c)  use (&$initial, &$cb) {
				#/home/grabli66/haxelib/tink_streams/git/src/tink/streams/Stream.hx:405: lines 405-410
				$__hx__switch = ($c->index);
				if ($__hx__switch === 0) {
					#/home/grabli66/haxelib/tink_streams/git/src/tink/streams/Stream.hx:408: characters 25-30
					throw new HxException("assert");
				} else if ($__hx__switch === 1) {
					#/home/grabli66/haxelib/tink_streams/git/src/tink/streams/Stream.hx:409: characters 32-52
					$cb(Reduction::Crashed($c->params[0], $c->params[1]));
				} else if ($__hx__switch === 2) {
					#/home/grabli66/haxelib/tink_streams/git/src/tink/streams/Stream.hx:406: characters 25-38
					$cb(Reduction::Failed($c->params[0]));
				} else if ($__hx__switch === 3) {
					#/home/grabli66/haxelib/tink_streams/git/src/tink/streams/Stream.hx:407: characters 24-44
					$cb(Reduction::Reduced($initial));
				}
			});
		}, true);
	}

	/**
	 * @param object $f
	 * 
	 * @return StreamObject
	 */
	public function regroup ($f) {
		#/home/grabli66/haxelib/tink_streams/git/src/tink/streams/Stream.hx:363: characters 5-38
		return new RegroupStream($this, $f);
	}

	/**
	 * @return \Closure
	 */
	public function retain () {
		#/home/grabli66/haxelib/tink_streams/git/src/tink/streams/Stream.hx:337: lines 337-347
		$_gthis = $this;
		#/home/grabli66/haxelib/tink_streams/git/src/tink/streams/Stream.hx:338: characters 5-18
		$this->retainCount++;
		#/home/grabli66/haxelib/tink_streams/git/src/tink/streams/Stream.hx:339: characters 5-25
		$retained = true;
		#/home/grabli66/haxelib/tink_streams/git/src/tink/streams/Stream.hx:340: lines 340-346
		return function ()  use (&$retained, &$_gthis) {
			#/home/grabli66/haxelib/tink_streams/git/src/tink/streams/Stream.hx:341: lines 341-345
			if ($retained) {
				#/home/grabli66/haxelib/tink_streams/git/src/tink/streams/Stream.hx:342: characters 9-25
				$retained = false;
				#/home/grabli66/haxelib/tink_streams/git/src/tink/streams/Stream.hx:343: characters 13-26
				--$_gthis->retainCount;
			}
		};
	}
}

Boot::registerClass(StreamBase::class, 'tink.streams.StreamBase');
Boot::registerGetters('tink\\streams\\StreamBase', [
	'depleted' => true
]);
