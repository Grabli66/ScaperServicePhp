<?php
/**
 * Generated by Haxe 4.0.0-rc.3+e3df7a4
 */

namespace tink\streams\_IdealStream;

use \tink\core\_Future\SyncFuture;
use \php\Boot;
use \tink\streams\_Stream\Stream_Impl_;
use \tink\streams\StreamObject;
use \tink\streams\Handled;
use \tink\core\_Lazy\LazyConst;
use \tink\streams\_Stream\Handler_Impl_;
use \tink\core\_Promise\Promise_Impl_;
use \tink\core\_Future\FutureObject;

final class IdealStream_Impl_ {
	/**
	 * @param StreamObject $this
	 * 
	 * @return FutureObject
	 */
	static public function collect ($this1) {
		#/home/grabli66/haxelib/tink_streams/git/src/tink/streams/IdealStream.hx:18: characters 5-18
		$buf = new \Array_hx();
		#/home/grabli66/haxelib/tink_streams/git/src/tink/streams/IdealStream.hx:19: lines 19-22
		return $this1->forEach(Handler_Impl_::ofSafe(function ($x)  use (&$buf) {
			#/home/grabli66/haxelib/tink_streams/git/src/tink/streams/IdealStream.hx:20: characters 7-18
			$buf->arr[$buf->length] = $x;
			++$buf->length;

			#/home/grabli66/haxelib/tink_streams/git/src/tink/streams/IdealStream.hx:21: characters 7-20
			return new SyncFuture(new LazyConst(Handled::Resume()));
		}))->map(function ($c)  use (&$buf) {
			#/home/grabli66/haxelib/tink_streams/git/src/tink/streams/IdealStream.hx:22: characters 24-34
			return $buf;
		})->gather();
	}

	/**
	 * @param FutureObject $p
	 * 
	 * @return StreamObject
	 */
	static public function promiseOfIdealStream ($p) {
		#/home/grabli66/haxelib/tink_streams/git/src/tink/streams/IdealStream.hx:11: characters 5-34
		return Stream_Impl_::promise(Promise_Impl_::ofSpecific($p));
	}

	/**
	 * @param FutureObject $p
	 * 
	 * @return StreamObject
	 */
	static public function promiseOfStreamNoise ($p) {
		#/home/grabli66/haxelib/tink_streams/git/src/tink/streams/IdealStream.hx:15: characters 5-34
		return Stream_Impl_::promise($p);
	}
}

Boot::registerClass(IdealStream_Impl_::class, 'tink.streams._IdealStream.IdealStream_Impl_');
