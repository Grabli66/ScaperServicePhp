<?php
/**
 * Generated by Haxe 4.0.0-rc.3+e3df7a448
 */

namespace tink\streams\_RealStream;

use \tink\core\_Future\SyncFuture;
use \php\Boot;
use \tink\streams\_Stream\Stream_Impl_;
use \tink\streams\StreamObject;
use \tink\core\Outcome;
use \tink\streams\Handled;
use \tink\core\_Lazy\LazyConst;
use \tink\streams\_Stream\Handler_Impl_;
use \tink\core\_Promise\Promise_Impl_;
use \php\_Boot\HxException;
use \tink\core\_Future\FutureObject;

final class RealStream_Impl_ {
	/**
	 * @param StreamObject $this
	 * 
	 * @return FutureObject
	 */
	static public function collect ($this1) {
		#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_streams/0.3.2/haxelib/src/tink/streams/RealStream.hx:26: characters 5-18
		$buf = new \Array_hx();
		#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_streams/0.3.2/haxelib/src/tink/streams/RealStream.hx:27: lines 27-34
		return $this1->forEach(Handler_Impl_::ofSafe(function ($x)  use (&$buf) {
			#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_streams/0.3.2/haxelib/src/tink/streams/RealStream.hx:28: characters 7-18
			$buf->arr[$buf->length] = $x;
			++$buf->length;

			#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_streams/0.3.2/haxelib/src/tink/streams/RealStream.hx:29: characters 7-20
			return new SyncFuture(new LazyConst(Handled::Resume()));
		}))->map(function ($c)  use (&$buf) {
			#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_streams/0.3.2/haxelib/src/tink/streams/RealStream.hx:30: lines 30-34
			$__hx__switch = ($c->index);
			if ($__hx__switch === 0) {
				#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_streams/0.3.2/haxelib/src/tink/streams/RealStream.hx:33: characters 19-24
				throw new HxException("unreachable");
			} else if ($__hx__switch === 2) {
				#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_streams/0.3.2/haxelib/src/tink/streams/RealStream.hx:32: characters 19-29
				return Outcome::Failure($c->params[0]);
			} else if ($__hx__switch === 3) {
				#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_streams/0.3.2/haxelib/src/tink/streams/RealStream.hx:31: characters 18-30
				return Outcome::Success($buf);
			}
		})->gather();
	}

	/**
	 * @param FutureObject $p
	 * 
	 * @return StreamObject
	 */
	static public function promiseOfIdealStream ($p) {
		#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_streams/0.3.2/haxelib/src/tink/streams/RealStream.hx:11: characters 5-34
		return Stream_Impl_::promise(Promise_Impl_::ofSpecific($p));
	}

	/**
	 * @param FutureObject $p
	 * 
	 * @return StreamObject
	 */
	static public function promiseOfRealStream ($p) {
		#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_streams/0.3.2/haxelib/src/tink/streams/RealStream.hx:19: characters 5-34
		return Stream_Impl_::promise(Promise_Impl_::ofSpecific($p));
	}

	/**
	 * @param FutureObject $p
	 * 
	 * @return StreamObject
	 */
	static public function promiseOfStreamError ($p) {
		#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_streams/0.3.2/haxelib/src/tink/streams/RealStream.hx:23: characters 5-34
		return Stream_Impl_::promise($p);
	}

	/**
	 * @param FutureObject $p
	 * 
	 * @return StreamObject
	 */
	static public function promiseOfStreamNoise ($p) {
		#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_streams/0.3.2/haxelib/src/tink/streams/RealStream.hx:15: characters 5-34
		return Stream_Impl_::promise($p);
	}
}

Boot::registerClass(RealStream_Impl_::class, 'tink.streams._RealStream.RealStream_Impl_');
