<?php
/**
 * Generated by Haxe 4.0.0-rc.3+e3df7a448
 */

namespace tink\http;

use \php\Boot;
use \tink\io\Transformer;
use \tink\streams\_Stream\Stream_Impl_;
use \haxe\io\_BytesData\Container as _BytesDataContainer;
use \tink\io\_Source\Source_Impl_;
use \tink\streams\StreamObject;
use \tink\chunk\ByteChunk;
use \tink\streams\_Stream\Mapping_Impl_;
use \haxe\io\Bytes;
use \tink\_Chunk\Chunk_Impl_;

class ChunkedEncoder implements Transformer {
	/**
	 * @return void
	 */
	public function __construct () {
	}

	/**
	 * @param StreamObject $source
	 * 
	 * @return StreamObject
	 */
	public function transform ($source) {
		#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_http/0.8.2/haxelib/src/tink/http/Chunked.hx:38: lines 38-39
		$tmp = Source_Impl_::chunked($source)->map(Mapping_Impl_::ofPlain(function ($chunk) {
			#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_http/0.8.2/haxelib/src/tink/http/Chunked.hx:39: characters 43-78
			$s = "" . (\StringTools::hex($chunk->getLength())??'null') . "\x0D\x0A";
			$b = strlen($s);
			$tmp1 = Chunk_Impl_::catChunk(ByteChunk::of(new Bytes($b, new _BytesDataContainer($s))), $chunk);
			#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_http/0.8.2/haxelib/src/tink/http/Chunked.hx:39: characters 43-87
			$b1 = strlen("\x0D\x0A");
			#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_http/0.8.2/haxelib/src/tink/http/Chunked.hx:39: characters 36-87
			return Chunk_Impl_::catChunk($tmp1, ByteChunk::of(new Bytes($b1, new _BytesDataContainer("\x0D\x0A"))));
		}));
		#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_http/0.8.2/haxelib/src/tink/http/Chunked.hx:40: characters 13-36
		$b2 = strlen("0\x0D\x0A");
		#C:/Users/VEgorov/AppData/Roaming/haxe/haxe_libraries/tink_http/0.8.2/haxelib/src/tink/http/Chunked.hx:38: lines 38-40
		return $tmp->append(Stream_Impl_::ofIterator((\Array_hx::wrap([ByteChunk::of(new Bytes($b2, new _BytesDataContainer("0\x0D\x0A")))]))->iterator()));
	}
}

Boot::registerClass(ChunkedEncoder::class, 'tink.http.ChunkedEncoder');
