<?php
/**
 * Generated by Haxe 4.0.0-rc.3+e3df7a4
 */

use \php\_Boot\HxAnon;
use \php\Boot;
use \tink\core\Outcome;
use \sys\Http;
use \tink\core\_Future\Future_Impl_;
use \php\_Boot\HxException;
use \tink\core\_Future\FutureObject;

class Root {
	/**
	 * @return void
	 */
	public function __construct () {
	}

	/**
	 * @param object $query
	 * 
	 * @return FutureObject
	 */
	public function parseXpath ($query) {
		#src/Main.hx:54: lines 54-97
		return Future_Impl_::async(function ($completer)  use (&$query) {
			#src/Main.hx:55: characters 4-40
			$http = new Http($query->url);
			#src/Main.hx:56: lines 56-88
			$http->onData = function ($data)  use (&$query, &$completer) {
				#src/Main.hx:57: lines 57-85
				try {
					#src/Main.hx:58: characters 6-34
					$dom = new \DOMDocument();
					#src/Main.hx:59: characters 6-67
					$dom->loadHTML("<?xml version=\"1.0\" encoding=\"UTF-8\"?>" . ($data??'null'));
					#src/Main.hx:61: characters 6-43
					$nodes = (new \DOMXPath($dom))->query($query->query);
					#src/Main.hx:62: lines 62-65
					$res = new \Array_hx();
					#src/Main.hx:66: lines 66-72
					$_g = 0;
					$_g1 = $nodes->length;
					while ($_g < $_g1) {
						#src/Main.hx:67: characters 7-32
						$node = $nodes->item($_g++);
						#src/Main.hx:69: characters 14-27
						$node1 = $node->nodeName;
						#src/Main.hx:68: lines 68-71
						$x = new HxAnon([
							"name" => $node1,
							"text" => trim($node->nodeValue),
						]);
						$res->arr[$res->length] = $x;
						++$res->length;

					}

					#src/Main.hx:74: lines 74-78
					$completer(new HxAnon([
						"code" => 0,
						"errorText" => null,
						"nodes" => $res,
					]));
				} catch (\Throwable $__hx__caught_e) {
					$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
					$e = $__hx__real_e;
					#src/Main.hx:80: lines 80-84
					$completer(new HxAnon([
						"code" => 1,
						"errorText" => null,
						"nodes" => null,
					]));
				}
				#src/Main.hx:87: characters 5-16
				return;
			};
			#src/Main.hx:89: lines 89-95
			$http->onError = function ($error)  use (&$completer) {
				#src/Main.hx:90: lines 90-94
				$completer(new HxAnon([
					"code" => 2,
					"errorText" => "Wrong URL",
					"nodes" => null,
				]));
				#src/Main.hx:89: lines 89-95
				return;
			};
			#src/Main.hx:96: characters 4-18
			$http->request();

			#src/Main.hx:54: lines 54-97
			return;
		})->map(Boot::getStaticClosure(Outcome::class, 'Success'))->gather();
	}
}

Boot::registerClass(Root::class, 'Root');
