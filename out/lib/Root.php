<?php
/**
 * Generated by Haxe 4.0.0-rc.3+e3df7a448
 */

use \php\_Boot\HxAnon;
use \php\Boot;
use \haxe\Log;
use \tink\core\Outcome;
use \sys\Http;
use \tink\core\_Future\Future_Impl_;
use \tink\core\_Future\FutureObject;

class Root {
	/**
	 * @return void
	 */
	public function __construct () {
	}

	/**
	 * @param object $query
	 * 
	 * @return FutureObject
	 */
	public function parseXpath ($query) {
		#src/Main.hx:53: lines 53-80
		return Future_Impl_::async(function ($completer)  use (&$query) {
			#src/Main.hx:54: characters 4-40
			$http = new Http($query->url);
			#src/Main.hx:55: lines 55-75
			$http->onData = function ($data)  use (&$query, &$completer) {
				#src/Main.hx:56: characters 5-33
				$dom = new \DOMDocument();
				#src/Main.hx:57: characters 5-66
				$dom->loadHTML("<?xml version=\"1.0\" encoding=\"UTF-8\"?>" . ($data??'null'));
				#src/Main.hx:59: characters 5-42
				$nodes = (new \DOMXPath($dom))->query($query->query);
				#src/Main.hx:60: lines 60-63
				$res = new \Array_hx();
				#src/Main.hx:64: lines 64-70
				$_g = 0;
				$_g1 = $nodes->length;
				while ($_g < $_g1) {
					#src/Main.hx:65: characters 6-31
					$node = $nodes->item($_g++);
					#src/Main.hx:67: characters 13-26
					$node1 = $node->nodeName;
					#src/Main.hx:66: lines 66-69
					$x = new HxAnon([
						"name" => $node1,
						"text" => trim($node->nodeValue),
					]);
					$res->arr[$res->length] = $x;
					++$res->length;

				}

				#src/Main.hx:72: lines 72-74
				$completer(new HxAnon(["nodes" => $res]));

				#src/Main.hx:55: lines 55-75
				return;
			};
			#src/Main.hx:76: lines 76-78
			$http->onError = function ($error) {
				#src/Main.hx:77: characters 5-10
				(Log::$trace)("error: " . ($error??'null'), new HxAnon([
					"fileName" => "src/Main.hx",
					"lineNumber" => 77,
					"className" => "Root",
					"methodName" => "parseXpath",
				]));
				#src/Main.hx:76: lines 76-78
				return;
			};
			#src/Main.hx:79: characters 4-18
			$http->request();

			#src/Main.hx:53: lines 53-80
			return;
		})->map(Boot::getStaticClosure(Outcome::class, 'Success'))->gather();
	}
}

Boot::registerClass(Root::class, 'Root');
